{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// TODO: This type is shared between the reconciler and ReactDOM, but will\n// eventually be lifted out to the renderer.\nimport { findHostInstanceWithNoPortals } from 'react-reconciler/inline.dom';\nimport { isContainerMarkedAsRoot, markContainerAsRoot, unmarkContainerAsRoot } from './ReactDOMComponentTree';\nimport { eagerlyTrapReplayableEvents } from '../events/ReactDOMEventReplaying';\nimport { ELEMENT_NODE, COMMENT_NODE, DOCUMENT_NODE, DOCUMENT_FRAGMENT_NODE } from '../shared/HTMLNodeType';\nimport { createContainer, updateContainer } from 'react-reconciler/inline.dom';\nimport invariant from 'shared/invariant';\nimport { BlockingRoot, ConcurrentRoot, LegacyRoot } from 'shared/ReactRootTags';\n\nfunction ReactDOMRoot(container, options) {\n  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);\n}\n/**\n * 创建 ReactDOMBlockingRoot 的类\n * 通过它可以创建 LegacyRoot 的 Fiber 数据结构\n */\n\n\nfunction ReactDOMBlockingRoot(container, tag, options) {\n  // tag => 0 => legacyRoot\n  // container => <div id=\"root\"></div>\n  // container._reactRootContainer = {_internalRoot: {}}\n  this._internalRoot = createRootImpl(container, tag, options);\n}\n\nReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {\n  const root = this._internalRoot;\n\n  if (__DEV__) {\n    if (typeof arguments[1] === 'function') {\n      console.error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');\n    }\n\n    const container = root.containerInfo;\n\n    if (container.nodeType !== COMMENT_NODE) {\n      const hostInstance = findHostInstanceWithNoPortals(root.current);\n\n      if (hostInstance) {\n        if (hostInstance.parentNode !== container) {\n          console.error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + \"root.unmount() to empty a root's container.\");\n        }\n      }\n    }\n  }\n\n  updateContainer(children, root, null, null);\n};\n\nReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {\n  if (__DEV__) {\n    if (typeof arguments[0] === 'function') {\n      console.error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');\n    }\n  }\n\n  const root = this._internalRoot;\n  const container = root.containerInfo;\n  updateContainer(null, root, null, () => {\n    unmarkContainerAsRoot(container);\n  });\n};\n\nfunction createRootImpl(container, tag, options) {\n  // container => <div id=\"root\"></div>\n  // tag => 0\n  // options => undefined\n  // 检测是否为服务器端渲染 false\n  const hydrate = options != null && options.hydrate === true; // 服务器端渲染相关 null\n\n  const hydrationCallbacks = options != null && options.hydrationOptions || null;\n  const root = createContainer(container, tag, hydrate, hydrationCallbacks);\n  markContainerAsRoot(root.current, container); // 服务器端渲染相关\n\n  if (hydrate && tag !== LegacyRoot) {\n    const doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;\n    eagerlyTrapReplayableEvents(container, doc);\n  }\n\n  return root;\n}\n\nexport function createRoot(container, options) {\n  invariant(isValidContainer(container), 'createRoot(...): Target container is not a DOM element.');\n  warnIfReactDOMContainerInDEV(container);\n  return new ReactDOMRoot(container, options);\n}\nexport function createBlockingRoot(container, options) {\n  invariant(isValidContainer(container), 'createRoot(...): Target container is not a DOM element.');\n  warnIfReactDOMContainerInDEV(container);\n  return new ReactDOMBlockingRoot(container, BlockingRoot, options);\n}\n/**\n * 通过实例化 ReactDOMBlockingRoot 类创建 LegacyRoot\n */\n\nexport function createLegacyRoot(container, options) {\n  // container => <div id=\"root\"></div>\n  // LegacyRoot 常量, 值为 0,\n  // 通过 render 方法创建的 container 就是 LegacyRoot\n  return new ReactDOMBlockingRoot(container, LegacyRoot, options);\n}\n/**\n * 判断 node 是否是符合要求的 DOM 节点\n * 1. node 可以是元素节点\n * 2. node 可以是 document 节点\n * 3. node 可以是 文档碎片节点\n * 4. node 可以是注释节点但注释内容必须是 react-mount-point-unstable\n *    react 内部会找到注释节点的父级 通过调用父级元素的 insertBefore 方法\n *    将 element 插入到注释节点的前面\n */\n\nexport function isValidContainer(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));\n}\n\nfunction warnIfReactDOMContainerInDEV(container) {\n  if (__DEV__) {\n    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {\n      console.error('createRoot(): Creating roots directly with document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try using a container element created ' + 'for your app.');\n    }\n\n    if (isContainerMarkedAsRoot(container)) {\n      if (container._reactRootContainer) {\n        console.error('You are calling ReactDOM.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');\n      } else {\n        console.error('You are calling ReactDOM.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-dom/src/client/ReactDOMRoot.js"],"names":["findHostInstanceWithNoPortals","isContainerMarkedAsRoot","markContainerAsRoot","unmarkContainerAsRoot","eagerlyTrapReplayableEvents","ELEMENT_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","createContainer","updateContainer","invariant","BlockingRoot","ConcurrentRoot","LegacyRoot","ReactDOMRoot","container","options","_internalRoot","createRootImpl","ReactDOMBlockingRoot","tag","prototype","render","children","root","__DEV__","arguments","console","error","containerInfo","nodeType","hostInstance","current","parentNode","unmount","hydrate","hydrationCallbacks","hydrationOptions","doc","ownerDocument","createRoot","isValidContainer","warnIfReactDOMContainerInDEV","createBlockingRoot","createLegacyRoot","node","nodeValue","tagName","toUpperCase","_reactRootContainer"],"mappings":"AAAA;;;;;;;;AAYA;AACA;AAEA,SAAQA,6BAAR,QAA4C,6BAA5C;AAmBA,SACEC,uBADF,EAEEC,mBAFF,EAGEC,qBAHF,QAIO,yBAJP;AAKA,SAAQC,2BAAR,QAA0C,kCAA1C;AACA,SACEC,YADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,sBAJF,QAKO,wBALP;AAOA,SAAQC,eAAR,EAAyBC,eAAzB,QAA+C,6BAA/C;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAAQC,YAAR,EAAsBC,cAAtB,EAAsCC,UAAtC,QAAuD,sBAAvD;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAA4CC,OAA5C,EAAyE;AACvE,OAAKC,aAAL,GAAqBC,cAAc,CAACH,SAAD,EAAYH,cAAZ,EAA4BI,OAA5B,CAAnC;AACD;AACD;;;;;;AAIA,SAASG,oBAAT,CACEJ,SADF,EAEEK,GAFF,EAGEJ,OAHF,EAIE;AACA;AACA;AACA;AACA,OAAKC,aAAL,GAAqBC,cAAc,CAACH,SAAD,EAAYK,GAAZ,EAAiBJ,OAAjB,CAAnC;AACD;;AAEDF,YAAY,CAACO,SAAb,CAAuBC,MAAvB,GAAgCH,oBAAoB,CAACE,SAArB,CAA+BC,MAA/B,GAAwC,UACtEC,QADsE,EAEhE;AACN,QAAMC,IAAI,GAAG,KAAKP,aAAlB;;AACA,MAAIQ,OAAJ,EAAa;AACX,QAAI,OAAOC,SAAS,CAAC,CAAD,CAAhB,KAAwB,UAA5B,EAAwC;AACtCC,MAAAA,OAAO,CAACC,KAAR,CACE,iEACE,4FAFJ;AAID;;AACD,UAAMb,SAAS,GAAGS,IAAI,CAACK,aAAvB;;AAEA,QAAId,SAAS,CAACe,QAAV,KAAuBzB,YAA3B,EAAyC;AACvC,YAAM0B,YAAY,GAAGhC,6BAA6B,CAACyB,IAAI,CAACQ,OAAN,CAAlD;;AACA,UAAID,YAAJ,EAAkB;AAChB,YAAIA,YAAY,CAACE,UAAb,KAA4BlB,SAAhC,EAA2C;AACzCY,UAAAA,OAAO,CAACC,KAAR,CACE,kEACE,8DADF,GAEE,iDAFF,GAGE,6CAJJ;AAMD;AACF;AACF;AACF;;AACDnB,EAAAA,eAAe,CAACc,QAAD,EAAWC,IAAX,EAAiB,IAAjB,EAAuB,IAAvB,CAAf;AACD,CA5BD;;AA8BAV,YAAY,CAACO,SAAb,CAAuBa,OAAvB,GAAiCf,oBAAoB,CAACE,SAArB,CAA+Ba,OAA/B,GAAyC,YAAkB;AAC1F,MAAIT,OAAJ,EAAa;AACX,QAAI,OAAOC,SAAS,CAAC,CAAD,CAAhB,KAAwB,UAA5B,EAAwC;AACtCC,MAAAA,OAAO,CAACC,KAAR,CACE,yDACE,4FAFJ;AAID;AACF;;AACD,QAAMJ,IAAI,GAAG,KAAKP,aAAlB;AACA,QAAMF,SAAS,GAAGS,IAAI,CAACK,aAAvB;AACApB,EAAAA,eAAe,CAAC,IAAD,EAAOe,IAAP,EAAa,IAAb,EAAmB,MAAM;AACtCtB,IAAAA,qBAAqB,CAACa,SAAD,CAArB;AACD,GAFc,CAAf;AAGD,CAdD;;AAeA,SAASG,cAAT,CACEH,SADF,EAEEK,GAFF,EAGEJ,OAHF,EAIE;AACA;AACA;AACA;AACA;AACA,QAAMmB,OAAO,GAAGnB,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACmB,OAAR,KAAoB,IAAvD,CALA,CAMA;;AACA,QAAMC,kBAAkB,GACrBpB,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACqB,gBAA5B,IAAiD,IADnD;AAEA,QAAMb,IAAI,GAAGhB,eAAe,CAACO,SAAD,EAAYK,GAAZ,EAAiBe,OAAjB,EAA0BC,kBAA1B,CAA5B;AACAnC,EAAAA,mBAAmB,CAACuB,IAAI,CAACQ,OAAN,EAAejB,SAAf,CAAnB,CAVA,CAWA;;AACA,MAAIoB,OAAO,IAAIf,GAAG,KAAKP,UAAvB,EAAmC;AACjC,UAAMyB,GAAG,GACPvB,SAAS,CAACe,QAAV,KAAuBxB,aAAvB,GACIS,SADJ,GAEIA,SAAS,CAACwB,aAHhB;AAIApC,IAAAA,2BAA2B,CAACY,SAAD,EAAYuB,GAAZ,CAA3B;AACD;;AACD,SAAOd,IAAP;AACD;;AAED,OAAO,SAASgB,UAAT,CACLzB,SADK,EAELC,OAFK,EAGK;AACVN,EAAAA,SAAS,CACP+B,gBAAgB,CAAC1B,SAAD,CADT,EAEP,yDAFO,CAAT;AAIA2B,EAAAA,4BAA4B,CAAC3B,SAAD,CAA5B;AACA,SAAO,IAAID,YAAJ,CAAiBC,SAAjB,EAA4BC,OAA5B,CAAP;AACD;AAED,OAAO,SAAS2B,kBAAT,CACL5B,SADK,EAELC,OAFK,EAGK;AACVN,EAAAA,SAAS,CACP+B,gBAAgB,CAAC1B,SAAD,CADT,EAEP,yDAFO,CAAT;AAIA2B,EAAAA,4BAA4B,CAAC3B,SAAD,CAA5B;AACA,SAAO,IAAII,oBAAJ,CAAyBJ,SAAzB,EAAoCJ,YAApC,EAAkDK,OAAlD,CAAP;AACD;AAED;;;;AAGA,OAAO,SAAS4B,gBAAT,CACL7B,SADK,EAELC,OAFK,EAGK;AACV;AACA;AACA;AACA,SAAO,IAAIG,oBAAJ,CAAyBJ,SAAzB,EAAoCF,UAApC,EAAgDG,OAAhD,CAAP;AACD;AACD;;;;;;;;;;AASA,OAAO,SAASyB,gBAAT,CAA0BI,IAA1B,EAAgD;AACrD,SAAO,CAAC,EACNA,IAAI,KACHA,IAAI,CAACf,QAAL,KAAkB1B,YAAlB,IACCyC,IAAI,CAACf,QAAL,KAAkBxB,aADnB,IAECuC,IAAI,CAACf,QAAL,KAAkBvB,sBAFnB,IAGEsC,IAAI,CAACf,QAAL,KAAkBzB,YAAlB,IACEwC,IAAD,CAAYC,SAAZ,KAA0B,8BAL1B,CADE,CAAR;AAQD;;AAED,SAASJ,4BAAT,CAAsC3B,SAAtC,EAAiD;AAC/C,MAAIU,OAAJ,EAAa;AACX,QACEV,SAAS,CAACe,QAAV,KAAuB1B,YAAvB,IACEW,SAAF,CAA4BgC,OAD5B,IAEEhC,SAAF,CAA4BgC,OAA5B,CAAoCC,WAApC,OAAsD,MAHxD,EAIE;AACArB,MAAAA,OAAO,CAACC,KAAR,CACE,iEACE,uEADF,GAEE,0DAFF,GAGE,+DAHF,GAIE,eALJ;AAOD;;AACD,QAAI5B,uBAAuB,CAACe,SAAD,CAA3B,EAAwC;AACtC,UAAIA,SAAS,CAACkC,mBAAd,EAAmC;AACjCtB,QAAAA,OAAO,CAACC,KAAR,CACE,8EACE,qDAFJ;AAID,OALD,MAKO;AACLD,QAAAA,OAAO,CAACC,KAAR,CACE,+DACE,gEADF,GAEE,sEAHJ;AAKD;AACF;AACF;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Container} from './ReactDOMHostConfig';\nimport type {RootTag} from 'shared/ReactRootTags';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n// TODO: This type is shared between the reconciler and ReactDOM, but will\n// eventually be lifted out to the renderer.\nimport type {FiberRoot} from 'react-reconciler/src/ReactFiberRoot';\nimport {findHostInstanceWithNoPortals} from 'react-reconciler/inline.dom';\n\nexport type RootType = {\n  render(children: ReactNodeList): void,\n  unmount(): void,\n  _internalRoot: FiberRoot,\n  ...\n};\n\nexport type RootOptions = {\n  hydrate?: boolean,\n  hydrationOptions?: {\n    onHydrated?: (suspenseNode: Comment) => void,\n    onDeleted?: (suspenseNode: Comment) => void,\n    ...\n  },\n  ...\n};\n\nimport {\n  isContainerMarkedAsRoot,\n  markContainerAsRoot,\n  unmarkContainerAsRoot,\n} from './ReactDOMComponentTree';\nimport {eagerlyTrapReplayableEvents} from '../events/ReactDOMEventReplaying';\nimport {\n  ELEMENT_NODE,\n  COMMENT_NODE,\n  DOCUMENT_NODE,\n  DOCUMENT_FRAGMENT_NODE,\n} from '../shared/HTMLNodeType';\n\nimport {createContainer, updateContainer} from 'react-reconciler/inline.dom';\nimport invariant from 'shared/invariant';\nimport {BlockingRoot, ConcurrentRoot, LegacyRoot} from 'shared/ReactRootTags';\n\nfunction ReactDOMRoot(container: Container, options: void | RootOptions) {\n  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);\n}\n/**\n * 创建 ReactDOMBlockingRoot 的类\n * 通过它可以创建 LegacyRoot 的 Fiber 数据结构\n */\nfunction ReactDOMBlockingRoot(\n  container: Container,\n  tag: RootTag,\n  options: void | RootOptions,\n) {\n  // tag => 0 => legacyRoot\n  // container => <div id=\"root\"></div>\n  // container._reactRootContainer = {_internalRoot: {}}\n  this._internalRoot = createRootImpl(container, tag, options);\n}\n\nReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (\n  children: ReactNodeList,\n): void {\n  const root = this._internalRoot;\n  if (__DEV__) {\n    if (typeof arguments[1] === 'function') {\n      console.error(\n        'render(...): does not support the second callback argument. ' +\n          'To execute a side effect after rendering, declare it in a component body with useEffect().',\n      );\n    }\n    const container = root.containerInfo;\n\n    if (container.nodeType !== COMMENT_NODE) {\n      const hostInstance = findHostInstanceWithNoPortals(root.current);\n      if (hostInstance) {\n        if (hostInstance.parentNode !== container) {\n          console.error(\n            'render(...): It looks like the React-rendered content of the ' +\n              'root container was removed without using React. This is not ' +\n              'supported and will cause errors. Instead, call ' +\n              \"root.unmount() to empty a root's container.\",\n          );\n        }\n      }\n    }\n  }\n  updateContainer(children, root, null, null);\n};\n\nReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function (): void {\n  if (__DEV__) {\n    if (typeof arguments[0] === 'function') {\n      console.error(\n        'unmount(...): does not support a callback argument. ' +\n          'To execute a side effect after rendering, declare it in a component body with useEffect().',\n      );\n    }\n  }\n  const root = this._internalRoot;\n  const container = root.containerInfo;\n  updateContainer(null, root, null, () => {\n    unmarkContainerAsRoot(container);\n  });\n};\nfunction createRootImpl(\n  container: Container,\n  tag: RootTag,\n  options: void | RootOptions,\n) {\n  // container => <div id=\"root\"></div>\n  // tag => 0\n  // options => undefined\n  // 检测是否为服务器端渲染 false\n  const hydrate = options != null && options.hydrate === true;\n  // 服务器端渲染相关 null\n  const hydrationCallbacks =\n    (options != null && options.hydrationOptions) || null;\n  const root = createContainer(container, tag, hydrate, hydrationCallbacks);\n  markContainerAsRoot(root.current, container);\n  // 服务器端渲染相关\n  if (hydrate && tag !== LegacyRoot) {\n    const doc =\n      container.nodeType === DOCUMENT_NODE\n        ? container\n        : container.ownerDocument;\n    eagerlyTrapReplayableEvents(container, doc);\n  }\n  return root;\n}\n\nexport function createRoot(\n  container: Container,\n  options?: RootOptions,\n): RootType {\n  invariant(\n    isValidContainer(container),\n    'createRoot(...): Target container is not a DOM element.',\n  );\n  warnIfReactDOMContainerInDEV(container);\n  return new ReactDOMRoot(container, options);\n}\n\nexport function createBlockingRoot(\n  container: Container,\n  options?: RootOptions,\n): RootType {\n  invariant(\n    isValidContainer(container),\n    'createRoot(...): Target container is not a DOM element.',\n  );\n  warnIfReactDOMContainerInDEV(container);\n  return new ReactDOMBlockingRoot(container, BlockingRoot, options);\n}\n\n/**\n * 通过实例化 ReactDOMBlockingRoot 类创建 LegacyRoot\n */\nexport function createLegacyRoot(\n  container: Container,\n  options?: RootOptions,\n): RootType {\n  // container => <div id=\"root\"></div>\n  // LegacyRoot 常量, 值为 0,\n  // 通过 render 方法创建的 container 就是 LegacyRoot\n  return new ReactDOMBlockingRoot(container, LegacyRoot, options);\n}\n/**\n * 判断 node 是否是符合要求的 DOM 节点\n * 1. node 可以是元素节点\n * 2. node 可以是 document 节点\n * 3. node 可以是 文档碎片节点\n * 4. node 可以是注释节点但注释内容必须是 react-mount-point-unstable\n *    react 内部会找到注释节点的父级 通过调用父级元素的 insertBefore 方法\n *    将 element 插入到注释节点的前面\n */\nexport function isValidContainer(node: mixed): boolean {\n  return !!(\n    node &&\n    (node.nodeType === ELEMENT_NODE ||\n      node.nodeType === DOCUMENT_NODE ||\n      node.nodeType === DOCUMENT_FRAGMENT_NODE ||\n      (node.nodeType === COMMENT_NODE &&\n        (node: any).nodeValue === ' react-mount-point-unstable '))\n  );\n}\n\nfunction warnIfReactDOMContainerInDEV(container) {\n  if (__DEV__) {\n    if (\n      container.nodeType === ELEMENT_NODE &&\n      ((container: any): Element).tagName &&\n      ((container: any): Element).tagName.toUpperCase() === 'BODY'\n    ) {\n      console.error(\n        'createRoot(): Creating roots directly with document.body is ' +\n          'discouraged, since its children are often manipulated by third-party ' +\n          'scripts and browser extensions. This may lead to subtle ' +\n          'reconciliation issues. Try using a container element created ' +\n          'for your app.',\n      );\n    }\n    if (isContainerMarkedAsRoot(container)) {\n      if (container._reactRootContainer) {\n        console.error(\n          'You are calling ReactDOM.createRoot() on a container that was previously ' +\n            'passed to ReactDOM.render(). This is not supported.',\n        );\n      } else {\n        console.error(\n          'You are calling ReactDOM.createRoot() on a container that ' +\n            'has already been passed to createRoot() before. Instead, call ' +\n            'root.render() on the existing root instead if you want to update it.',\n        );\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}