{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport invariant from 'shared/invariant';\nimport ReactNoopUpdateQueue from './ReactNoopUpdateQueue';\nconst emptyObject = {};\n\nif (__DEV__) {\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  invariant(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\nif (__DEV__) {\n  const deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  const defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        console.warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n        return undefined;\n      }\n    });\n  };\n\n  for (const fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nconst pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\nObject.assign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\nexport { Component, PureComponent };","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react/src/ReactBaseClasses.js"],"names":["invariant","ReactNoopUpdateQueue","emptyObject","__DEV__","Object","freeze","Component","props","context","updater","refs","prototype","isReactComponent","setState","partialState","callback","enqueueSetState","forceUpdate","enqueueForceUpdate","deprecatedAPIs","isMounted","replaceState","defineDeprecationWarning","methodName","info","defineProperty","get","console","warn","undefined","fnName","hasOwnProperty","ComponentDummy","PureComponent","pureComponentPrototype","constructor","assign","isPureReactComponent"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport invariant from 'shared/invariant';\n\nimport ReactNoopUpdateQueue from './ReactNoopUpdateQueue';\n\nconst emptyObject = {};\nif (__DEV__) {\n  Object.freeze(emptyObject);\n}\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nComponent.prototype.setState = function(partialState, callback) {\n  invariant(\n    typeof partialState === 'object' ||\n      typeof partialState === 'function' ||\n      partialState == null,\n    'setState(...): takes an object of state variables to update or a ' +\n      'function which returns an object of state variables.',\n  );\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nComponent.prototype.forceUpdate = function(callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (__DEV__) {\n  const deprecatedAPIs = {\n    isMounted: [\n      'isMounted',\n      'Instead, make sure to clean up subscriptions and pending requests in ' +\n        'componentWillUnmount to prevent memory leaks.',\n    ],\n    replaceState: [\n      'replaceState',\n      'Refactor your code to use setState instead (see ' +\n        'https://github.com/facebook/react/issues/3236).',\n    ],\n  };\n  const defineDeprecationWarning = function(methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function() {\n        console.warn(\n          '%s(...) is deprecated in plain JavaScript React classes. %s',\n          info[0],\n          info[1],\n        );\n        return undefined;\n      },\n    });\n  };\n  for (const fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\nComponentDummy.prototype = Component.prototype;\n\n/**\n * Convenience component with default shallow equality check for sCU.\n */\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nconst pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());\npureComponentPrototype.constructor = PureComponent;\n// Avoid an extra prototype jump for these methods.\nObject.assign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\nexport {Component, PureComponent};\n"]},"metadata":{},"sourceType":"module"}