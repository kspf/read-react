{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { showErrorDialog } from './ReactFiberErrorDialog';\nexport function logCapturedError(capturedError) {\n  const logError = showErrorDialog(capturedError); // Allow injected showErrorDialog() to prevent default console.error logging.\n  // This enables renderers like ReactNative to better manage redbox behavior.\n\n  if (logError === false) {\n    return;\n  }\n\n  const error = capturedError.error;\n\n  if (__DEV__) {\n    const {\n      componentName,\n      componentStack,\n      errorBoundaryName,\n      errorBoundaryFound,\n      willRetry\n    } = capturedError; // Browsers support silencing uncaught errors by calling\n    // `preventDefault()` in window `error` handler.\n    // We record this information as an expando on the error.\n\n    if (error != null && error._suppressLogging) {\n      if (errorBoundaryFound && willRetry) {\n        // The error is recoverable and was silenced.\n        // Ignore it and don't print the stack addendum.\n        // This is handy for testing error boundaries without noise.\n        return;\n      } // The error is fatal. Since the silencing might have\n      // been accidental, we'll surface it anyway.\n      // However, the browser would have silenced the original error\n      // so we'll print it first, and then print the stack addendum.\n\n\n      console['error'](error); // Don't transform to our wrapper\n      // For a more detailed description of this block, see:\n      // https://github.com/facebook/react/pull/13384\n    }\n\n    const componentNameMessage = componentName ? `The above error occurred in the <${componentName}> component:` : 'The above error occurred in one of your React components:';\n    let errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.\n\n    if (errorBoundaryFound && errorBoundaryName) {\n      if (willRetry) {\n        errorBoundaryMessage = `React will try to recreate this component tree from scratch ` + `using the error boundary you provided, ${errorBoundaryName}.`;\n      } else {\n        errorBoundaryMessage = `This error was initially handled by the error boundary ${errorBoundaryName}.\\n` + `Recreating the tree from scratch failed so React will unmount the tree.`;\n      }\n    } else {\n      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';\n    }\n\n    const combinedMessage = `${componentNameMessage}${componentStack}\\n\\n` + `${errorBoundaryMessage}`; // In development, we provide our own message with just the component stack.\n    // We don't include the original error message and JS stack because the browser\n    // has already printed it. Even if the application swallows the error, it is still\n    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n    console['error'](combinedMessage); // Don't transform to our wrapper\n  } else {\n    // In production, we print the error directly.\n    // This will include the message, the JS stack, and anything the browser wants to show.\n    // We pass the error object instead of custom message so that the browser displays the error natively.\n    console['error'](error); // Don't transform to our wrapper\n  }\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-reconciler/src/ReactFiberErrorLogger.js"],"names":["showErrorDialog","logCapturedError","capturedError","logError","error","__DEV__","componentName","componentStack","errorBoundaryName","errorBoundaryFound","willRetry","_suppressLogging","console","componentNameMessage","errorBoundaryMessage","combinedMessage"],"mappings":"AAAA;;;;;;;;AAWA,SAAQA,eAAR,QAA8B,yBAA9B;AAEA,OAAO,SAASC,gBAAT,CAA0BC,aAA1B,EAA8D;AACnE,QAAMC,QAAQ,GAAGH,eAAe,CAACE,aAAD,CAAhC,CADmE,CAGnE;AACA;;AACA,MAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACtB;AACD;;AAED,QAAMC,KAAK,GAAIF,aAAa,CAACE,KAA7B;;AACA,MAAIC,OAAJ,EAAa;AACX,UAAM;AACJC,MAAAA,aADI;AAEJC,MAAAA,cAFI;AAGJC,MAAAA,iBAHI;AAIJC,MAAAA,kBAJI;AAKJC,MAAAA;AALI,QAMFR,aANJ,CADW,CASX;AACA;AACA;;AACA,QAAIE,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACO,gBAA3B,EAA6C;AAC3C,UAAIF,kBAAkB,IAAIC,SAA1B,EAAqC;AACnC;AACA;AACA;AACA;AACD,OAN0C,CAO3C;AACA;AACA;AACA;;;AACAE,MAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBR,KAAjB,EAX2C,CAWlB;AACzB;AACA;AACD;;AAED,UAAMS,oBAAoB,GAAGP,aAAa,GACrC,oCAAmCA,aAAc,cADZ,GAEtC,2DAFJ;AAIA,QAAIQ,oBAAJ,CAhCW,CAiCX;;AACA,QAAIL,kBAAkB,IAAID,iBAA1B,EAA6C;AAC3C,UAAIE,SAAJ,EAAe;AACbI,QAAAA,oBAAoB,GACjB,8DAAD,GACC,0CAAyCN,iBAAkB,GAF9D;AAGD,OAJD,MAIO;AACLM,QAAAA,oBAAoB,GACjB,0DAAyDN,iBAAkB,KAA5E,GACC,yEAFH;AAGD;AACF,KAVD,MAUO;AACLM,MAAAA,oBAAoB,GAClB,2FACA,kFAFF;AAGD;;AACD,UAAMC,eAAe,GAClB,GAAEF,oBAAqB,GAAEN,cAAe,MAAzC,GACC,GAAEO,oBAAqB,EAF1B,CAjDW,CAqDX;AACA;AACA;AACA;;AACAF,IAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBG,eAAjB,EAzDW,CAyDwB;AACpC,GA1DD,MA0DO;AACL;AACA;AACA;AACAH,IAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBR,KAAjB,EAJK,CAIoB;AAC1B;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {CapturedError} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\n\nexport function logCapturedError(capturedError: CapturedError): void {\n  const logError = showErrorDialog(capturedError);\n\n  // Allow injected showErrorDialog() to prevent default console.error logging.\n  // This enables renderers like ReactNative to better manage redbox behavior.\n  if (logError === false) {\n    return;\n  }\n\n  const error = (capturedError.error: any);\n  if (__DEV__) {\n    const {\n      componentName,\n      componentStack,\n      errorBoundaryName,\n      errorBoundaryFound,\n      willRetry,\n    } = capturedError;\n\n    // Browsers support silencing uncaught errors by calling\n    // `preventDefault()` in window `error` handler.\n    // We record this information as an expando on the error.\n    if (error != null && error._suppressLogging) {\n      if (errorBoundaryFound && willRetry) {\n        // The error is recoverable and was silenced.\n        // Ignore it and don't print the stack addendum.\n        // This is handy for testing error boundaries without noise.\n        return;\n      }\n      // The error is fatal. Since the silencing might have\n      // been accidental, we'll surface it anyway.\n      // However, the browser would have silenced the original error\n      // so we'll print it first, and then print the stack addendum.\n      console['error'](error); // Don't transform to our wrapper\n      // For a more detailed description of this block, see:\n      // https://github.com/facebook/react/pull/13384\n    }\n\n    const componentNameMessage = componentName\n      ? `The above error occurred in the <${componentName}> component:`\n      : 'The above error occurred in one of your React components:';\n\n    let errorBoundaryMessage;\n    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.\n    if (errorBoundaryFound && errorBoundaryName) {\n      if (willRetry) {\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      } else {\n        errorBoundaryMessage =\n          `This error was initially handled by the error boundary ${errorBoundaryName}.\\n` +\n          `Recreating the tree from scratch failed so React will unmount the tree.`;\n      }\n    } else {\n      errorBoundaryMessage =\n        'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n        'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';\n    }\n    const combinedMessage =\n      `${componentNameMessage}${componentStack}\\n\\n` +\n      `${errorBoundaryMessage}`;\n\n    // In development, we provide our own message with just the component stack.\n    // We don't include the original error message and JS stack because the browser\n    // has already printed it. Even if the application swallows the error, it is still\n    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n    console['error'](combinedMessage); // Don't transform to our wrapper\n  } else {\n    // In production, we print the error directly.\n    // This will include the message, the JS stack, and anything the browser wants to show.\n    // We pass the error object instead of custom message so that the browser displays the error natively.\n    console['error'](error); // Don't transform to our wrapper\n  }\n}\n"]},"metadata":{},"sourceType":"module"}