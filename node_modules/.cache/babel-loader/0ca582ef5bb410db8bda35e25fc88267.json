{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { ClassComponent, HostRoot, HostComponent, HostPortal, ContextProvider, SuspenseComponent, SuspenseListComponent } from 'shared/ReactWorkTags';\nimport { DidCapture, NoEffect, ShouldCapture } from 'shared/ReactSideEffectTags';\nimport { enableSuspenseServerRenderer } from 'shared/ReactFeatureFlags';\nimport { popHostContainer, popHostContext } from './ReactFiberHostContext';\nimport { popSuspenseContext } from './ReactFiberSuspenseContext';\nimport { resetHydrationState } from './ReactFiberHydrationContext';\nimport { isContextProvider as isLegacyContextProvider, popContext as popLegacyContext, popTopLevelContextObject as popTopLevelLegacyContextObject } from './ReactFiberContext';\nimport { popProvider } from './ReactFiberNewContext';\nimport invariant from 'shared/invariant';\n\nfunction unwindWork(workInProgress, renderExpirationTime) {\n  switch (workInProgress.tag) {\n    case ClassComponent:\n      {\n        const Component = workInProgress.type;\n\n        if (isLegacyContextProvider(Component)) {\n          popLegacyContext(workInProgress);\n        }\n\n        const effectTag = workInProgress.effectTag;\n\n        if (effectTag & ShouldCapture) {\n          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case HostRoot:\n      {\n        popHostContainer(workInProgress);\n        popTopLevelLegacyContextObject(workInProgress);\n        const effectTag = workInProgress.effectTag;\n        invariant((effectTag & DidCapture) === NoEffect, 'The root failed to unmount after an error. This is likely a bug in ' + 'React. Please file an issue.');\n        workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;\n        return workInProgress;\n      }\n\n    case HostComponent:\n      {\n        // TODO: popHydrationState\n        popHostContext(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n\n        if (enableSuspenseServerRenderer) {\n          const suspenseState = workInProgress.memoizedState;\n\n          if (suspenseState !== null && suspenseState.dehydrated !== null) {\n            invariant(workInProgress.alternate !== null, 'Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n            resetHydrationState();\n          }\n        }\n\n        const effectTag = workInProgress.effectTag;\n\n        if (effectTag & ShouldCapture) {\n          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n        // caught by a nested boundary. If not, it should bubble through.\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n\n    case ContextProvider:\n      popProvider(workInProgress);\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(interruptedWork) {\n  switch (interruptedWork.tag) {\n    case ClassComponent:\n      {\n        const childContextTypes = interruptedWork.type.childContextTypes;\n\n        if (childContextTypes !== null && childContextTypes !== undefined) {\n          popLegacyContext(interruptedWork);\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n        popHostContainer(interruptedWork);\n        popTopLevelLegacyContextObject(interruptedWork);\n        break;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(interruptedWork);\n        break;\n      }\n\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case ContextProvider:\n      popProvider(interruptedWork);\n      break;\n\n    default:\n      break;\n  }\n}\n\nexport { unwindWork, unwindInterruptedWork };","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-reconciler/src/ReactFiberUnwindWork.js"],"names":["ClassComponent","HostRoot","HostComponent","HostPortal","ContextProvider","SuspenseComponent","SuspenseListComponent","DidCapture","NoEffect","ShouldCapture","enableSuspenseServerRenderer","popHostContainer","popHostContext","popSuspenseContext","resetHydrationState","isContextProvider","isLegacyContextProvider","popContext","popLegacyContext","popTopLevelContextObject","popTopLevelLegacyContextObject","popProvider","invariant","unwindWork","workInProgress","renderExpirationTime","tag","Component","type","effectTag","suspenseState","memoizedState","dehydrated","alternate","unwindInterruptedWork","interruptedWork","childContextTypes","undefined"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactFiber';\nimport type {ExpirationTime} from './ReactFiberExpirationTime';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent';\n\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n} from 'shared/ReactWorkTags';\nimport {DidCapture, NoEffect, ShouldCapture} from 'shared/ReactSideEffectTags';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext';\nimport {resetHydrationState} from './ReactFiberHydrationContext';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext';\nimport {popProvider} from './ReactFiberNewContext';\n\nimport invariant from 'shared/invariant';\n\nfunction unwindWork(\n  workInProgress: Fiber,\n  renderExpirationTime: ExpirationTime,\n) {\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const effectTag = workInProgress.effectTag;\n      if (effectTag & ShouldCapture) {\n        workInProgress.effectTag = (effectTag & ~ShouldCapture) | DidCapture;\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      const effectTag = workInProgress.effectTag;\n      invariant(\n        (effectTag & DidCapture) === NoEffect,\n        'The root failed to unmount after an error. This is likely a bug in ' +\n          'React. Please file an issue.',\n      );\n      workInProgress.effectTag = (effectTag & ~ShouldCapture) | DidCapture;\n      return workInProgress;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          invariant(\n            workInProgress.alternate !== null,\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n          resetHydrationState();\n        }\n      }\n      const effectTag = workInProgress.effectTag;\n      if (effectTag & ShouldCapture) {\n        workInProgress.effectTag = (effectTag & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      popProvider(workInProgress);\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(interruptedWork: Fiber) {\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      popProvider(interruptedWork);\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n"]},"metadata":{},"sourceType":"module"}