{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nexport const Uninitialized = -1;\nexport const Pending = 0;\nexport const Resolved = 1;\nexport const Rejected = 2;\nexport function refineResolvedLazyComponent(lazyComponent) {\n  return lazyComponent._status === Resolved ? lazyComponent._result : null;\n}\nexport function initializeLazyComponentType(lazyComponent) {\n  if (lazyComponent._status === Uninitialized) {\n    lazyComponent._status = Pending;\n    const ctor = lazyComponent._ctor;\n    const thenable = ctor();\n    lazyComponent._result = thenable;\n    thenable.then(moduleObject => {\n      if (lazyComponent._status === Pending) {\n        const defaultExport = moduleObject.default;\n\n        if (__DEV__) {\n          if (defaultExport === undefined) {\n            console.error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + \"const MyComponent = lazy(() => import('./MyComponent'))\", moduleObject);\n          }\n        }\n\n        lazyComponent._status = Resolved;\n        lazyComponent._result = defaultExport;\n      }\n    }, error => {\n      if (lazyComponent._status === Pending) {\n        lazyComponent._status = Rejected;\n        lazyComponent._result = error;\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/shared/ReactLazyComponent.js"],"names":["Uninitialized","Pending","Resolved","Rejected","refineResolvedLazyComponent","lazyComponent","_status","_result","initializeLazyComponentType","ctor","_ctor","thenable","then","moduleObject","defaultExport","default","__DEV__","undefined","console","error"],"mappings":"AAAA;;;;;;;;AA8BA,OAAO,MAAMA,aAAa,GAAG,CAAC,CAAvB;AACP,OAAO,MAAMC,OAAO,GAAG,CAAhB;AACP,OAAO,MAAMC,QAAQ,GAAG,CAAjB;AACP,OAAO,MAAMC,QAAQ,GAAG,CAAjB;AAEP,OAAO,SAASC,2BAAT,CACLC,aADK,EAE4B;AACjC,SAAOA,aAAa,CAACC,OAAd,KAA0BJ,QAA1B,GAAqCG,aAAa,CAACE,OAAnD,GAA6D,IAApE;AACD;AAED,OAAO,SAASC,2BAAT,CACLH,aADK,EAEC;AACN,MAAIA,aAAa,CAACC,OAAd,KAA0BN,aAA9B,EAA6C;AAC3CK,IAAAA,aAAa,CAACC,OAAd,GAAwBL,OAAxB;AACA,UAAMQ,IAAI,GAAGJ,aAAa,CAACK,KAA3B;AACA,UAAMC,QAAQ,GAAGF,IAAI,EAArB;AACAJ,IAAAA,aAAa,CAACE,OAAd,GAAwBI,QAAxB;AACAA,IAAAA,QAAQ,CAACC,IAAT,CACEC,YAAY,IAAI;AACd,UAAIR,aAAa,CAACC,OAAd,KAA0BL,OAA9B,EAAuC;AACrC,cAAMa,aAAa,GAAGD,YAAY,CAACE,OAAnC;;AACA,YAAIC,OAAJ,EAAa;AACX,cAAIF,aAAa,KAAKG,SAAtB,EAAiC;AAC/BC,YAAAA,OAAO,CAACC,KAAR,CACE,2DACE,0DADF,GAEE,yDAHJ,EAIEN,YAJF;AAMD;AACF;;AACDR,QAAAA,aAAa,CAACC,OAAd,GAAwBJ,QAAxB;AACAG,QAAAA,aAAa,CAACE,OAAd,GAAwBO,aAAxB;AACD;AACF,KAjBH,EAkBEK,KAAK,IAAI;AACP,UAAId,aAAa,CAACC,OAAd,KAA0BL,OAA9B,EAAuC;AACrCI,QAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACAE,QAAAA,aAAa,CAACE,OAAd,GAAwBY,KAAxB;AACD;AACF,KAvBH;AAyBD;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type Thenable<T, R> = {\n  then(resolve: (T) => mixed, reject: (mixed) => mixed): R,\n  ...\n};\n\nexport type LazyComponent<T> = {\n  $$typeof: Symbol | number,\n  _ctor: () => Thenable<{default: T, ...}, mixed>,\n  _status: 0 | 1 | 2,\n  _result: any,\n  ...\n};\n\ntype ResolvedLazyComponent<T> = {\n  $$typeof: Symbol | number,\n  _ctor: () => Thenable<{default: T, ...}, mixed>,\n  _status: 1,\n  _result: any,\n  ...\n};\n\nexport const Uninitialized = -1;\nexport const Pending = 0;\nexport const Resolved = 1;\nexport const Rejected = 2;\n\nexport function refineResolvedLazyComponent<T>(\n  lazyComponent: LazyComponent<T>,\n): ResolvedLazyComponent<T> | null {\n  return lazyComponent._status === Resolved ? lazyComponent._result : null;\n}\n\nexport function initializeLazyComponentType(\n  lazyComponent: LazyComponent<any>,\n): void {\n  if (lazyComponent._status === Uninitialized) {\n    lazyComponent._status = Pending;\n    const ctor = lazyComponent._ctor;\n    const thenable = ctor();\n    lazyComponent._result = thenable;\n    thenable.then(\n      moduleObject => {\n        if (lazyComponent._status === Pending) {\n          const defaultExport = moduleObject.default;\n          if (__DEV__) {\n            if (defaultExport === undefined) {\n              console.error(\n                'lazy: Expected the result of a dynamic import() call. ' +\n                  'Instead received: %s\\n\\nYour code should look like: \\n  ' +\n                  \"const MyComponent = lazy(() => import('./MyComponent'))\",\n                moduleObject,\n              );\n            }\n          }\n          lazyComponent._status = Resolved;\n          lazyComponent._result = defaultExport;\n        }\n      },\n      error => {\n        if (lazyComponent._status === Pending) {\n          lazyComponent._status = Rejected;\n          lazyComponent._result = error;\n        }\n      },\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}