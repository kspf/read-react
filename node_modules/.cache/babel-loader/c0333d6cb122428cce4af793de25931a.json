{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE } from 'shared/ReactSymbols';\nexport function createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    if (__DEV__) {\n      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {\n        console.error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);\n      }\n    }\n  }\n\n  const context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  let hasWarnedAboutUsingNestedContextConsumers = false;\n  let hasWarnedAboutUsingConsumerProvider = false;\n\n  if (__DEV__) {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    const Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get() {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n            console.error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n\n        set(_Provider) {\n          context.Provider = _Provider;\n        }\n\n      },\n      _currentValue: {\n        get() {\n          return context._currentValue;\n        },\n\n        set(_currentValue) {\n          context._currentValue = _currentValue;\n        }\n\n      },\n      _currentValue2: {\n        get() {\n          return context._currentValue2;\n        },\n\n        set(_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n\n      },\n      _threadCount: {\n        get() {\n          return context._threadCount;\n        },\n\n        set(_threadCount) {\n          context._threadCount = _threadCount;\n        }\n\n      },\n      Consumer: {\n        get() {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n            console.error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  } else {\n    context.Consumer = context;\n  }\n\n  if (__DEV__) {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react/src/ReactContext.js"],"names":["REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","createContext","defaultValue","calculateChangedBits","undefined","__DEV__","console","error","context","$$typeof","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","hasWarnedAboutUsingNestedContextConsumers","hasWarnedAboutUsingConsumerProvider","Object","defineProperties","get","set","_Provider","_currentRenderer","_currentRenderer2"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport type {ReactContext} from 'shared/ReactTypes';\n\nexport function createContext<T>(\n  defaultValue: T,\n  calculateChangedBits: ?(a: T, b: T) => number,\n): ReactContext<T> {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    if (__DEV__) {\n      if (\n        calculateChangedBits !== null &&\n        typeof calculateChangedBits !== 'function'\n      ) {\n        console.error(\n          'createContext: Expected the optional second argument to be a ' +\n            'function. Instead received: %s',\n          calculateChangedBits,\n        );\n      }\n    }\n  }\n\n  const context: ReactContext<T> = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: (null: any),\n    Consumer: (null: any),\n  };\n\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context,\n  };\n\n  let hasWarnedAboutUsingNestedContextConsumers = false;\n  let hasWarnedAboutUsingConsumerProvider = false;\n\n  if (__DEV__) {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    const Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits,\n    };\n    // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get() {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n            console.error(\n              'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' +\n                'a future major release. Did you mean to render <Context.Provider> instead?',\n            );\n          }\n          return context.Provider;\n        },\n        set(_Provider) {\n          context.Provider = _Provider;\n        },\n      },\n      _currentValue: {\n        get() {\n          return context._currentValue;\n        },\n        set(_currentValue) {\n          context._currentValue = _currentValue;\n        },\n      },\n      _currentValue2: {\n        get() {\n          return context._currentValue2;\n        },\n        set(_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        },\n      },\n      _threadCount: {\n        get() {\n          return context._threadCount;\n        },\n        set(_threadCount) {\n          context._threadCount = _threadCount;\n        },\n      },\n      Consumer: {\n        get() {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n            console.error(\n              'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' +\n                'a future major release. Did you mean to render <Context.Consumer> instead?',\n            );\n          }\n          return context.Consumer;\n        },\n      },\n    });\n    // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n    context.Consumer = Consumer;\n  } else {\n    context.Consumer = context;\n  }\n\n  if (__DEV__) {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}