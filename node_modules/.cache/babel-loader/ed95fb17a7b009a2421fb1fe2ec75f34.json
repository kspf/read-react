{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport checkPropTypes from 'prop-types/checkPropTypes';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport { enableDeprecatedFlareAPI } from 'shared/ReactFeatureFlags';\nlet ReactDebugCurrentFrame = null;\nconst ReactControlledValuePropTypes = {\n  checkPropTypes: null\n};\n\nif (__DEV__) {\n  ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n  const hasReadOnlyValue = {\n    button: true,\n    checkbox: true,\n    image: true,\n    hidden: true,\n    radio: true,\n    reset: true,\n    submit: true\n  };\n  const propTypes = {\n    value: function (props, propName, componentName) {\n      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI && props.DEPRECATED_flareListeners) {\n        return null;\n      }\n\n      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    },\n    checked: function (props, propName, componentName) {\n      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI && props.DEPRECATED_flareListeners) {\n        return null;\n      }\n\n      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n  };\n  /**\n   * Provide a linked `value` attribute for controlled forms. You should not use\n   * this outside of the ReactDOM controlled form components.\n   */\n\n  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {\n    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame.getStackAddendum);\n  };\n}\n\nexport default ReactControlledValuePropTypes;","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-dom/src/shared/ReactControlledValuePropTypes.js"],"names":["checkPropTypes","ReactSharedInternals","enableDeprecatedFlareAPI","ReactDebugCurrentFrame","ReactControlledValuePropTypes","__DEV__","hasReadOnlyValue","button","checkbox","image","hidden","radio","reset","submit","propTypes","value","props","propName","componentName","type","onChange","readOnly","disabled","DEPRECATED_flareListeners","Error","checked","tagName","getStackAddendum"],"mappings":"AAAA;;;;;;AAOA,OAAOA,cAAP,MAA2B,2BAA3B;AACA,OAAOC,oBAAP,MAAiC,6BAAjC;AACA,SAAQC,wBAAR,QAAuC,0BAAvC;AAEA,IAAIC,sBAAsB,GAAG,IAA7B;AAEA,MAAMC,6BAA6B,GAAG;AACpCJ,EAAAA,cAAc,EAAE;AADoB,CAAtC;;AAIA,IAAIK,OAAJ,EAAa;AACXF,EAAAA,sBAAsB,GAAGF,oBAAoB,CAACE,sBAA9C;AAEA,QAAMG,gBAAgB,GAAG;AACvBC,IAAAA,MAAM,EAAE,IADe;AAEvBC,IAAAA,QAAQ,EAAE,IAFa;AAGvBC,IAAAA,KAAK,EAAE,IAHgB;AAIvBC,IAAAA,MAAM,EAAE,IAJe;AAKvBC,IAAAA,KAAK,EAAE,IALgB;AAMvBC,IAAAA,KAAK,EAAE,IANgB;AAOvBC,IAAAA,MAAM,EAAE;AAPe,GAAzB;AAUA,QAAMC,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAE,UAASC,KAAT,EAAgBC,QAAhB,EAA0BC,aAA1B,EAAyC;AAC9C,UACEZ,gBAAgB,CAACU,KAAK,CAACG,IAAP,CAAhB,IACAH,KAAK,CAACI,QADN,IAEAJ,KAAK,CAACK,QAFN,IAGAL,KAAK,CAACM,QAHN,IAIAN,KAAK,CAACC,QAAD,CAAL,IAAmB,IAJnB,IAKCf,wBAAwB,IAAIc,KAAK,CAACO,yBANrC,EAOE;AACA,eAAO,IAAP;AACD;;AACD,aAAO,IAAIC,KAAJ,CACL,4DACE,6DADF,GAEE,6DAFF,GAGE,sCAJG,CAAP;AAMD,KAlBe;AAmBhBC,IAAAA,OAAO,EAAE,UAAST,KAAT,EAAgBC,QAAhB,EAA0BC,aAA1B,EAAyC;AAChD,UACEF,KAAK,CAACI,QAAN,IACAJ,KAAK,CAACK,QADN,IAEAL,KAAK,CAACM,QAFN,IAGAN,KAAK,CAACC,QAAD,CAAL,IAAmB,IAHnB,IAICf,wBAAwB,IAAIc,KAAK,CAACO,yBALrC,EAME;AACA,eAAO,IAAP;AACD;;AACD,aAAO,IAAIC,KAAJ,CACL,8DACE,6DADF,GAEE,+DAFF,GAGE,sCAJG,CAAP;AAMD;AAnCe,GAAlB;AAsCA;;;;;AAIApB,EAAAA,6BAA6B,CAACJ,cAA9B,GAA+C,UAAS0B,OAAT,EAAkBV,KAAlB,EAAyB;AACtEhB,IAAAA,cAAc,CACZc,SADY,EAEZE,KAFY,EAGZ,MAHY,EAIZU,OAJY,EAKZvB,sBAAsB,CAACwB,gBALX,CAAd;AAOD,GARD;AASD;;AAED,eAAevB,6BAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport checkPropTypes from 'prop-types/checkPropTypes';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {enableDeprecatedFlareAPI} from 'shared/ReactFeatureFlags';\n\nlet ReactDebugCurrentFrame = null;\n\nconst ReactControlledValuePropTypes = {\n  checkPropTypes: null,\n};\n\nif (__DEV__) {\n  ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\n  const hasReadOnlyValue = {\n    button: true,\n    checkbox: true,\n    image: true,\n    hidden: true,\n    radio: true,\n    reset: true,\n    submit: true,\n  };\n\n  const propTypes = {\n    value: function(props, propName, componentName) {\n      if (\n        hasReadOnlyValue[props.type] ||\n        props.onChange ||\n        props.readOnly ||\n        props.disabled ||\n        props[propName] == null ||\n        (enableDeprecatedFlareAPI && props.DEPRECATED_flareListeners)\n      ) {\n        return null;\n      }\n      return new Error(\n        'You provided a `value` prop to a form field without an ' +\n          '`onChange` handler. This will render a read-only field. If ' +\n          'the field should be mutable use `defaultValue`. Otherwise, ' +\n          'set either `onChange` or `readOnly`.',\n      );\n    },\n    checked: function(props, propName, componentName) {\n      if (\n        props.onChange ||\n        props.readOnly ||\n        props.disabled ||\n        props[propName] == null ||\n        (enableDeprecatedFlareAPI && props.DEPRECATED_flareListeners)\n      ) {\n        return null;\n      }\n      return new Error(\n        'You provided a `checked` prop to a form field without an ' +\n          '`onChange` handler. This will render a read-only field. If ' +\n          'the field should be mutable use `defaultChecked`. Otherwise, ' +\n          'set either `onChange` or `readOnly`.',\n      );\n    },\n  };\n\n  /**\n   * Provide a linked `value` attribute for controlled forms. You should not use\n   * this outside of the ReactDOM controlled form components.\n   */\n  ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {\n    checkPropTypes(\n      propTypes,\n      props,\n      'prop',\n      tagName,\n      ReactDebugCurrentFrame.getStackAddendum,\n    );\n  };\n}\n\nexport default ReactControlledValuePropTypes;\n"]},"metadata":{},"sourceType":"module"}