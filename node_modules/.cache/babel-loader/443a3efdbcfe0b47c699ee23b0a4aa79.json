{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport { HostRoot, HostPortal, HostText, Fragment, ContextProvider, ContextConsumer } from 'shared/ReactWorkTags';\nimport describeComponentFrame from 'shared/describeComponentFrame';\nimport getComponentName from 'shared/getComponentName';\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction describeFiber(fiber) {\n  switch (fiber.tag) {\n    case HostRoot:\n    case HostPortal:\n    case HostText:\n    case Fragment:\n    case ContextProvider:\n    case ContextConsumer:\n      return '';\n\n    default:\n      const owner = fiber._debugOwner;\n      const source = fiber._debugSource;\n      const name = getComponentName(fiber.type);\n      let ownerName = null;\n\n      if (owner) {\n        ownerName = getComponentName(owner.type);\n      }\n\n      return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress) {\n  let info = '';\n  let node = workInProgress;\n\n  do {\n    info += describeFiber(node);\n    node = node.return;\n  } while (node);\n\n  return info;\n}\nexport let current = null;\nexport let isRendering = false;\nexport function getCurrentFiberOwnerNameInDevOrNull() {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n\n    const owner = current._debugOwner;\n\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentName(owner.type);\n    }\n  }\n\n  return null;\n}\nexport function getCurrentFiberStackInDev() {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    } // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n\n\n    return getStackByFiberInDevAndProd(current);\n  }\n\n  return '';\n}\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\nexport function setCurrentFiber(fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\nexport function setIsRendering(rendering) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-reconciler/src/ReactCurrentFiber.js"],"names":["ReactSharedInternals","HostRoot","HostPortal","HostText","Fragment","ContextProvider","ContextConsumer","describeComponentFrame","getComponentName","ReactDebugCurrentFrame","describeFiber","fiber","tag","owner","_debugOwner","source","_debugSource","name","type","ownerName","getStackByFiberInDevAndProd","workInProgress","info","node","return","current","isRendering","getCurrentFiberOwnerNameInDevOrNull","__DEV__","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","setIsRendering","rendering"],"mappings":"AAAA;;;;;;;;AAWA,OAAOA,oBAAP,MAAiC,6BAAjC;AACA,SACEC,QADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,QAJF,EAKEC,eALF,EAMEC,eANF,QAOO,sBAPP;AAQA,OAAOC,sBAAP,MAAmC,+BAAnC;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AAEA,MAAMC,sBAAsB,GAAGT,oBAAoB,CAACS,sBAApD;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA6C;AAC3C,UAAQA,KAAK,CAACC,GAAd;AACE,SAAKX,QAAL;AACA,SAAKC,UAAL;AACA,SAAKC,QAAL;AACA,SAAKC,QAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACE,aAAO,EAAP;;AACF;AACE,YAAMO,KAAK,GAAGF,KAAK,CAACG,WAApB;AACA,YAAMC,MAAM,GAAGJ,KAAK,CAACK,YAArB;AACA,YAAMC,IAAI,GAAGT,gBAAgB,CAACG,KAAK,CAACO,IAAP,CAA7B;AACA,UAAIC,SAAS,GAAG,IAAhB;;AACA,UAAIN,KAAJ,EAAW;AACTM,QAAAA,SAAS,GAAGX,gBAAgB,CAACK,KAAK,CAACK,IAAP,CAA5B;AACD;;AACD,aAAOX,sBAAsB,CAACU,IAAD,EAAOF,MAAP,EAAeI,SAAf,CAA7B;AAhBJ;AAkBD;;AAED,OAAO,SAASC,2BAAT,CAAqCC,cAArC,EAAoE;AACzE,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAGF,cAAX;;AACA,KAAG;AACDC,IAAAA,IAAI,IAAIZ,aAAa,CAACa,IAAD,CAArB;AACAA,IAAAA,IAAI,GAAGA,IAAI,CAACC,MAAZ;AACD,GAHD,QAGSD,IAHT;;AAIA,SAAOD,IAAP;AACD;AAED,OAAO,IAAIG,OAAqB,GAAG,IAA5B;AACP,OAAO,IAAIC,WAAoB,GAAG,KAA3B;AAEP,OAAO,SAASC,mCAAT,GAA8D;AACnE,MAAIC,OAAJ,EAAa;AACX,QAAIH,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAO,IAAP;AACD;;AACD,UAAMZ,KAAK,GAAGY,OAAO,CAACX,WAAtB;;AACA,QAAID,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,WAAvC,EAAoD;AAClD,aAAOL,gBAAgB,CAACK,KAAK,CAACK,IAAP,CAAvB;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED,OAAO,SAASW,yBAAT,GAA6C;AAClD,MAAID,OAAJ,EAAa;AACX,QAAIH,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAO,EAAP;AACD,KAHU,CAIX;AACA;;;AACA,WAAOL,2BAA2B,CAACK,OAAD,CAAlC;AACD;;AACD,SAAO,EAAP;AACD;AAED,OAAO,SAASK,iBAAT,GAA6B;AAClC,MAAIF,OAAJ,EAAa;AACXnB,IAAAA,sBAAsB,CAACsB,eAAvB,GAAyC,IAAzC;AACAN,IAAAA,OAAO,GAAG,IAAV;AACAC,IAAAA,WAAW,GAAG,KAAd;AACD;AACF;AAED,OAAO,SAASM,eAAT,CAAyBrB,KAAzB,EAAuC;AAC5C,MAAIiB,OAAJ,EAAa;AACXnB,IAAAA,sBAAsB,CAACsB,eAAvB,GAAyCF,yBAAzC;AACAJ,IAAAA,OAAO,GAAGd,KAAV;AACAe,IAAAA,WAAW,GAAG,KAAd;AACD;AACF;AAED,OAAO,SAASO,cAAT,CAAwBC,SAAxB,EAA4C;AACjD,MAAIN,OAAJ,EAAa;AACXF,IAAAA,WAAW,GAAGQ,SAAd;AACD;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactFiber';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  HostRoot,\n  HostPortal,\n  HostText,\n  Fragment,\n  ContextProvider,\n  ContextConsumer,\n} from 'shared/ReactWorkTags';\nimport describeComponentFrame from 'shared/describeComponentFrame';\nimport getComponentName from 'shared/getComponentName';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction describeFiber(fiber: Fiber): string {\n  switch (fiber.tag) {\n    case HostRoot:\n    case HostPortal:\n    case HostText:\n    case Fragment:\n    case ContextProvider:\n    case ContextConsumer:\n      return '';\n    default:\n      const owner = fiber._debugOwner;\n      const source = fiber._debugSource;\n      const name = getComponentName(fiber.type);\n      let ownerName = null;\n      if (owner) {\n        ownerName = getComponentName(owner.type);\n      }\n      return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  let info = '';\n  let node = workInProgress;\n  do {\n    info += describeFiber(node);\n    node = node.return;\n  } while (node);\n  return info;\n}\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentName(owner.type);\n    }\n  }\n  return null;\n}\n\nexport function getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}