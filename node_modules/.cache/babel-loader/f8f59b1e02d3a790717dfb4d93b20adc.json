{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * \n */\nimport invariant from 'shared/invariant';\nimport { getFiberCurrentPropsFromNode } from './EventPluginUtils';\n\nfunction isInteractive(tag) {\n  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';\n}\n\nfunction shouldPreventMouseEvent(name, type, props) {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n    case 'onMouseEnter':\n      return !!(props.disabled && isInteractive(type));\n\n    default:\n      return false;\n  }\n}\n/**\n * @param {object} inst The instance, which is the source of events.\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @return {?function} The stored callback.\n */\n\n\nexport default function getListener(inst, registrationName) {\n  let listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not\n  // live here; needs to be moved to a better place soon\n\n  const stateNode = inst.stateNode;\n\n  if (!stateNode) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n\n  const props = getFiberCurrentPropsFromNode(stateNode);\n\n  if (!props) {\n    // Work in progress.\n    return null;\n  }\n\n  listener = props[registrationName];\n\n  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {\n    return null;\n  }\n\n  invariant(!listener || typeof listener === 'function', 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);\n  return listener;\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/legacy-events/getListener.js"],"names":["invariant","getFiberCurrentPropsFromNode","isInteractive","tag","shouldPreventMouseEvent","name","type","props","disabled","getListener","inst","registrationName","listener","stateNode"],"mappings":"AAAA;;;;;;;AAUA,OAAOA,SAAP,MAAsB,kBAAtB;AAEA,SAAQC,4BAAR,QAA2C,oBAA3C;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,SACEA,GAAG,KAAK,QAAR,IACAA,GAAG,KAAK,OADR,IAEAA,GAAG,KAAK,QAFR,IAGAA,GAAG,KAAK,UAJV;AAMD;;AAED,SAASC,uBAAT,CAAiCC,IAAjC,EAAuCC,IAAvC,EAA6CC,KAA7C,EAAoD;AAClD,UAAQF,IAAR;AACE,SAAK,SAAL;AACA,SAAK,gBAAL;AACA,SAAK,eAAL;AACA,SAAK,sBAAL;AACA,SAAK,aAAL;AACA,SAAK,oBAAL;AACA,SAAK,aAAL;AACA,SAAK,oBAAL;AACA,SAAK,WAAL;AACA,SAAK,kBAAL;AACA,SAAK,cAAL;AACE,aAAO,CAAC,EAAEE,KAAK,CAACC,QAAN,IAAkBN,aAAa,CAACI,IAAD,CAAjC,CAAR;;AACF;AACE,aAAO,KAAP;AAdJ;AAgBD;AAED;;;;;;;AAKA,eAAe,SAASG,WAAT,CAAqBC,IAArB,EAAkCC,gBAAlC,EAA4D;AACzE,MAAIC,QAAJ,CADyE,CAGzE;AACA;;AACA,QAAMC,SAAS,GAAGH,IAAI,CAACG,SAAvB;;AACA,MAAI,CAACA,SAAL,EAAgB;AACd;AACA,WAAO,IAAP;AACD;;AACD,QAAMN,KAAK,GAAGN,4BAA4B,CAACY,SAAD,CAA1C;;AACA,MAAI,CAACN,KAAL,EAAY;AACV;AACA,WAAO,IAAP;AACD;;AACDK,EAAAA,QAAQ,GAAGL,KAAK,CAACI,gBAAD,CAAhB;;AACA,MAAIP,uBAAuB,CAACO,gBAAD,EAAmBD,IAAI,CAACJ,IAAxB,EAA8BC,KAA9B,CAA3B,EAAiE;AAC/D,WAAO,IAAP;AACD;;AACDP,EAAAA,SAAS,CACP,CAACY,QAAD,IAAa,OAAOA,QAAP,KAAoB,UAD1B,EAEP,4EAFO,EAGPD,gBAHO,EAIP,OAAOC,QAJA,CAAT;AAMA,SAAOA,QAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactFiber';\n\nimport invariant from 'shared/invariant';\n\nimport {getFiberCurrentPropsFromNode} from './EventPluginUtils';\n\nfunction isInteractive(tag) {\n  return (\n    tag === 'button' ||\n    tag === 'input' ||\n    tag === 'select' ||\n    tag === 'textarea'\n  );\n}\n\nfunction shouldPreventMouseEvent(name, type, props) {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n    case 'onMouseEnter':\n      return !!(props.disabled && isInteractive(type));\n    default:\n      return false;\n  }\n}\n\n/**\n * @param {object} inst The instance, which is the source of events.\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @return {?function} The stored callback.\n */\nexport default function getListener(inst: Fiber, registrationName: string) {\n  let listener;\n\n  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not\n  // live here; needs to be moved to a better place soon\n  const stateNode = inst.stateNode;\n  if (!stateNode) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n  const props = getFiberCurrentPropsFromNode(stateNode);\n  if (!props) {\n    // Work in progress.\n    return null;\n  }\n  listener = props[registrationName];\n  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {\n    return null;\n  }\n  invariant(\n    !listener || typeof listener === 'function',\n    'Expected `%s` listener to be a function, instead got a value of `%s` type.',\n    registrationName,\n    typeof listener,\n  );\n  return listener;\n}\n"]},"metadata":{},"sourceType":"module"}