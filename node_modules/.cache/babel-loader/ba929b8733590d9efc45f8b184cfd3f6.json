{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'shared/invariant';\nimport { enableProfilerTimer, enableFundamentalAPI, enableUserTimingAPI, enableScopeAPI, enableBlocksAPI } from 'shared/ReactFeatureFlags';\nimport { NoEffect, Placement } from 'shared/ReactSideEffectTags';\nimport { ConcurrentRoot, BlockingRoot } from 'shared/ReactRootTags';\nimport { IndeterminateComponent, ClassComponent, HostRoot, HostComponent, HostText, HostPortal, ForwardRef, Fragment, Mode, ContextProvider, ContextConsumer, Profiler, SuspenseComponent, SuspenseListComponent, DehydratedFragment, FunctionComponent, MemoComponent, SimpleMemoComponent, LazyComponent, FundamentalComponent, ScopeComponent, Block } from 'shared/ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport { isDevToolsPresent } from './ReactFiberDevToolsHook';\nimport { resolveClassForHotReloading, resolveFunctionForHotReloading, resolveForwardRefForHotReloading } from './ReactFiberHotReloading';\nimport { NoWork } from './ReactFiberExpirationTime';\nimport { NoMode, ConcurrentMode, ProfileMode, StrictMode, BlockingMode } from './ReactTypeOfMode';\nimport { REACT_FORWARD_REF_TYPE, REACT_FRAGMENT_TYPE, REACT_STRICT_MODE_TYPE, REACT_PROFILER_TYPE, REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE, REACT_CONCURRENT_MODE_TYPE, REACT_SUSPENSE_TYPE, REACT_SUSPENSE_LIST_TYPE, REACT_MEMO_TYPE, REACT_LAZY_TYPE, REACT_FUNDAMENTAL_TYPE, REACT_SCOPE_TYPE, REACT_BLOCK_TYPE } from 'shared/ReactSymbols';\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    const testMap = new Map([[nonExtensibleObject, null]]);\n    const testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.\n    // https://github.com/rollup/rollup/issues/1771\n    // TODO: we can remove these if Rollup fixes the bug.\n\n    testMap.set(0, 0);\n    testSet.add(0);\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nlet debugCounter = 1;\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.effectTag = NoEffect;\n  this.nextEffect = null;\n  this.firstEffect = null;\n  this.lastEffect = null;\n  this.expirationTime = NoWork;\n  this.childExpirationTime = NoWork;\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  } // This is normally DEV-only except www when it adds listeners.\n  // TODO: remove the User Timing integration in favor of Root Events.\n\n\n  if (enableUserTimingAPI) {\n    this._debugID = debugCounter++;\n    this._debugIsCurrentlyTiming = false;\n  }\n\n  if (__DEV__) {\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\nconst createFiber = function (tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;\n}\nexport function resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n\n    if (enableBlocksAPI) {\n      if ($$typeof === REACT_BLOCK_TYPE) {\n        return Block;\n      }\n    }\n  }\n\n  return IndeterminateComponent;\n} // 构建 workInProgress Fiber 树中的 rootFiber\n// 构建完成后会替换 current fiber\n// 初始渲染 pendingProps 为 null\n\nexport function createWorkInProgress(current, pendingProps) {\n  // current: current Fiber 中的 rootFiber\n  // 获取 current Fiber 对应的 workInProgress Fiber\n  let workInProgress = current.alternate; // 如果 workInProgress 不存在\n\n  if (workInProgress === null) {\n    // 创建 fiber 对象\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode); // 属性复用\n\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n      if (enableUserTimingAPI) {\n        workInProgress._debugID = current._debugID;\n      }\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    } // 使用 alternate 存储 current\n\n\n    workInProgress.alternate = current; // 使用 alternate 存储 workInProgress\n\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.\n\n    workInProgress.nextEffect = null;\n    workInProgress.firstEffect = null;\n    workInProgress.lastEffect = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  workInProgress.childExpirationTime = current.childExpirationTime;\n  workInProgress.expirationTime = current.expirationTime;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    expirationTime: currentDependencies.expirationTime,\n    firstContext: currentDependencies.firstContext,\n    responders: currentDependencies.responders\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nexport function resetWorkInProgress(workInProgress, renderExpirationTime) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect tag but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.effectTag &= Placement; // The effect list is no longer valid.\n\n  workInProgress.nextEffect = null;\n  workInProgress.firstEffect = null;\n  workInProgress.lastEffect = null;\n  let current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childExpirationTime = NoWork;\n    workInProgress.expirationTime = renderExpirationTime;\n    workInProgress.child = null;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childExpirationTime = current.childExpirationTime;\n    workInProgress.expirationTime = current.expirationTime;\n    workInProgress.child = current.child;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      expirationTime: currentDependencies.expirationTime,\n      firstContext: currentDependencies.firstContext,\n      responders: currentDependencies.responders\n    };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\nexport function createHostRootFiber(tag) {\n  // 根据 tag 值设置 mode\n  let mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode | BlockingMode | StrictMode;\n  } else if (tag === BlockingRoot) {\n    mode = BlockingMode | StrictMode;\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nexport function createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, expirationTime) {\n  let fiber;\n  let fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  let resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);\n\n      case REACT_CONCURRENT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= ConcurrentMode | BlockingMode | StrictMode;\n        break;\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictMode;\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                fiberTag = ContextProvider;\n                break getTag;\n\n              case REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = ContextConsumer;\n                break getTag;\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                if (__DEV__) {\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                }\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n\n              case REACT_BLOCK_TYPE:\n                fiberTag = Block;\n                break getTag;\n\n              case REACT_FUNDAMENTAL_TYPE:\n                if (enableFundamentalAPI) {\n                  return createFiberFromFundamental(type, pendingProps, mode, expirationTime, key);\n                }\n\n                break;\n\n              case REACT_SCOPE_TYPE:\n                if (enableScopeAPI) {\n                  return createFiberFromScope(type, pendingProps, mode, expirationTime, key);\n                }\n\n            }\n          }\n\n          let info = '';\n\n          if (__DEV__) {\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n            }\n\n            const ownerName = owner ? getComponentName(owner.type) : null;\n\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n          }\n\n          invariant(false, 'Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + 'but got: %s.%s', type == null ? type : typeof type, info);\n        }\n    }\n  }\n\n  fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n} // 根据 React Element 创建 Fiber 对象\n\nexport function createFiberFromElement(element, // 父级Fiber mode 子级需要继承\nmode, expirationTime) {\n  let owner = null;\n\n  if (__DEV__) {\n    owner = element._owner;\n  }\n\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);\n\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\nexport function createFiberFromFragment(elements, mode, expirationTime, key) {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\nexport function createFiberFromFundamental(fundamentalComponent, pendingProps, mode, expirationTime, key) {\n  const fiber = createFiber(FundamentalComponent, pendingProps, key, mode);\n  fiber.elementType = fundamentalComponent;\n  fiber.type = fundamentalComponent;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nfunction createFiberFromScope(scope, pendingProps, mode, expirationTime, key) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, expirationTime, key) {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {\n      console.error('Profiler must specify an \"id\" string and \"onRender\" function as props');\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.\n\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.type = REACT_PROFILER_TYPE;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nexport function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n\n  fiber.type = REACT_SUSPENSE_TYPE;\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\nexport function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n\n  if (__DEV__) {\n    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.\n    // This needs to be fixed in getComponentName so that it relies on the tag\n    // instead.\n    fiber.type = REACT_SUSPENSE_LIST_TYPE;\n  }\n\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\nexport function createFiberFromText(content, mode, expirationTime) {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\nexport function createFiberFromHostInstanceForDeletion() {\n  const fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.\n\n  fiber.elementType = 'DELETED';\n  fiber.type = 'DELETED';\n  return fiber;\n}\nexport function createFiberFromDehydratedFragment(dehydratedNode) {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\nexport function createFiberFromPortal(portal, mode, expirationTime) {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.expirationTime = expirationTime;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n} // Used for stashing WIP properties to replay failed work in DEV.\n\nexport function assignFiberPropertiesInDEV(target, source) {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  } // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.effectTag = source.effectTag;\n  target.nextEffect = source.nextEffect;\n  target.firstEffect = source.firstEffect;\n  target.lastEffect = source.lastEffect;\n  target.expirationTime = source.expirationTime;\n  target.childExpirationTime = source.childExpirationTime;\n  target.alternate = source.alternate;\n\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  if (enableUserTimingAPI) {\n    target._debugID = source._debugID;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-reconciler/src/ReactFiber.js"],"names":["invariant","enableProfilerTimer","enableFundamentalAPI","enableUserTimingAPI","enableScopeAPI","enableBlocksAPI","NoEffect","Placement","ConcurrentRoot","BlockingRoot","IndeterminateComponent","ClassComponent","HostRoot","HostComponent","HostText","HostPortal","ForwardRef","Fragment","Mode","ContextProvider","ContextConsumer","Profiler","SuspenseComponent","SuspenseListComponent","DehydratedFragment","FunctionComponent","MemoComponent","SimpleMemoComponent","LazyComponent","FundamentalComponent","ScopeComponent","Block","getComponentName","isDevToolsPresent","resolveClassForHotReloading","resolveFunctionForHotReloading","resolveForwardRefForHotReloading","NoWork","NoMode","ConcurrentMode","ProfileMode","StrictMode","BlockingMode","REACT_FORWARD_REF_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_CONCURRENT_MODE_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_FUNDAMENTAL_TYPE","REACT_SCOPE_TYPE","REACT_BLOCK_TYPE","hasBadMapPolyfill","__DEV__","nonExtensibleObject","Object","preventExtensions","testMap","Map","testSet","Set","set","add","e","debugCounter","FiberNode","tag","pendingProps","key","mode","elementType","type","stateNode","return","child","sibling","index","ref","memoizedProps","updateQueue","memoizedState","dependencies","effectTag","nextEffect","firstEffect","lastEffect","expirationTime","childExpirationTime","alternate","actualDuration","Number","NaN","actualStartTime","selfBaseDuration","treeBaseDuration","_debugID","_debugIsCurrentlyTiming","_debugSource","_debugOwner","_debugNeedsRemount","_debugHookTypes","createFiber","shouldConstruct","Component","prototype","isReactComponent","isSimpleFunctionComponent","defaultProps","undefined","resolveLazyComponentTag","$$typeof","createWorkInProgress","current","workInProgress","currentDependencies","firstContext","responders","resetWorkInProgress","renderExpirationTime","createHostRootFiber","createFiberFromTypeAndProps","owner","fiber","fiberTag","resolvedType","getTag","createFiberFromFragment","children","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromFundamental","createFiberFromScope","info","keys","length","ownerName","createFiberFromElement","element","_owner","props","_source","elements","fundamentalComponent","scope","id","onRender","console","error","createFiberFromText","content","createFiberFromHostInstanceForDeletion","createFiberFromDehydratedFragment","dehydratedNode","createFiberFromPortal","portal","containerInfo","pendingChildren","implementation","assignFiberPropertiesInDEV","target","source"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement, Source} from 'shared/ReactElementType';\nimport type {\n  ReactFragment,\n  ReactPortal,\n  RefObject,\n  ReactEventResponder,\n  ReactEventResponderInstance,\n  ReactFundamentalComponent,\n  ReactScope,\n} from 'shared/ReactTypes';\nimport type {RootTag} from 'shared/ReactRootTags';\nimport type {WorkTag} from 'shared/ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {SideEffectTag} from 'shared/ReactSideEffectTags';\nimport type {ExpirationTime} from './ReactFiberExpirationTime';\nimport type {UpdateQueue} from './ReactUpdateQueue';\nimport type {ContextDependency} from './ReactFiberNewContext';\nimport type {HookType} from './ReactFiberHooks';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\nimport {\n  enableProfilerTimer,\n  enableFundamentalAPI,\n  enableUserTimingAPI,\n  enableScopeAPI,\n  enableBlocksAPI,\n} from 'shared/ReactFeatureFlags';\nimport {NoEffect, Placement} from 'shared/ReactSideEffectTags';\nimport {ConcurrentRoot, BlockingRoot} from 'shared/ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n} from 'shared/ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading';\nimport {NoWork} from './ReactFiberExpirationTime';\nimport {\n  NoMode,\n  ConcurrentMode,\n  ProfileMode,\n  StrictMode,\n  BlockingMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_FUNDAMENTAL_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_BLOCK_TYPE,\n} from 'shared/ReactSymbols';\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    const testMap = new Map([[nonExtensibleObject, null]]);\n    const testSet = new Set([nonExtensibleObject]);\n    // This is necessary for Rollup to not consider these unused.\n    // https://github.com/rollup/rollup/issues/1771\n    // TODO: we can remove these if Rollup fixes the bug.\n    testMap.set(0, 0);\n    testSet.add(0);\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nexport type Dependencies = {\n  expirationTime: ExpirationTime,\n  firstContext: ContextDependency<mixed> | null,\n  responders: Map<\n    ReactEventResponder<any, any>,\n    ReactEventResponderInstance<any, any>,\n  > | null,\n  ...\n};\n\n// A Fiber is work on a Component that needs to be done or was done. There can\n// be more than one per component.\nexport type Fiber = {|\n  // These first fields are conceptually members of an Instance. This used to\n  // be split into a separate type and intersected with the other Fiber fields,\n  // but until Flow fixes its intersection bugs, we've merged them into a\n  // single type.\n\n  // An Instance is shared between all versions of a component. We can easily\n  // break this out into a separate object to avoid copying so much to the\n  // alternate versions of the tree. We put this on a single object for now to\n  // minimize the number of objects created during the initial render.\n\n  // Tag identifying the type of fiber.\n  tag: WorkTag,\n\n  // Unique identifier of this child.\n  key: null | string,\n\n  // The value of element.type which is used to preserve the identity during\n  // reconciliation of this child.\n  elementType: any,\n\n  // The resolved function/class/ associated with this fiber.\n  type: any,\n\n  // The local state associated with this fiber.\n  stateNode: any,\n\n  // Conceptual aliases\n  // parent : Instance -> return The parent happens to be the same as the\n  // return fiber since we've merged the fiber and instance.\n\n  // Remaining fields belong to Fiber\n\n  // The Fiber to return to after finishing processing this one.\n  // This is effectively the parent, but there can be multiple parents (two)\n  // so this is only the parent of the thing we're currently processing.\n  // It is conceptually the same as the return address of a stack frame.\n  return: Fiber | null,\n\n  // Singly Linked List Tree Structure.\n  child: Fiber | null,\n  sibling: Fiber | null,\n  index: number,\n\n  // The ref last used to attach this node.\n  // I'll avoid adding an owner field for prod and model that as functions.\n  ref:\n    | null\n    | (((handle: mixed) => void) & {_stringRef: ?string, ...})\n    | RefObject,\n\n  // Input is the data coming into process this fiber. Arguments. Props.\n  pendingProps: any, // This type will be more specific once we overload the tag.\n  memoizedProps: any, // The props used to create the output.\n\n  // A queue of state updates and callbacks.\n  updateQueue: UpdateQueue<any> | null,\n\n  // The state used to create the output\n  memoizedState: any,\n\n  // Dependencies (contexts, events) for this fiber, if it has any\n  dependencies: Dependencies | null,\n\n  // Bitfield that describes properties about the fiber and its subtree. E.g.\n  // the ConcurrentMode flag indicates whether the subtree should be async-by-\n  // default. When a fiber is created, it inherits the mode of its\n  // parent. Additional flags can be set at creation time, but after that the\n  // value should remain unchanged throughout the fiber's lifetime, particularly\n  // before its child fibers are created.\n  mode: TypeOfMode,\n\n  // Effect\n  effectTag: SideEffectTag,\n\n  // Singly linked list fast path to the next fiber with side-effects.\n  nextEffect: Fiber | null,\n\n  // The first and last fiber with side-effect within this subtree. This allows\n  // us to reuse a slice of the linked list when we reuse the work done within\n  // this fiber.\n  firstEffect: Fiber | null,\n  lastEffect: Fiber | null,\n\n  // Represents a time in the future by which this work should be completed.\n  // Does not include work found in its subtree.\n  expirationTime: ExpirationTime,\n\n  // This is used to quickly determine if a subtree has no pending changes.\n  childExpirationTime: ExpirationTime,\n\n  // This is a pooled version of a Fiber. Every fiber that gets updated will\n  // eventually have a pair. There are cases when we can clean up pairs to save\n  // memory if we need to.\n  alternate: Fiber | null,\n\n  // Time spent rendering this Fiber and its descendants for the current update.\n  // This tells us how well the tree makes use of sCU for memoization.\n  // It is reset to 0 each time we render and only updated when we don't bailout.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualDuration?: number,\n\n  // If the Fiber is currently active in the \"render\" phase,\n  // This marks the time at which the work began.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualStartTime?: number,\n\n  // Duration of the most recent render time for this Fiber.\n  // This value is not updated when we bailout for memoization purposes.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  selfBaseDuration?: number,\n\n  // Sum of base times for all descendants of this Fiber.\n  // This value bubbles up during the \"complete\" phase.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  treeBaseDuration?: number,\n\n  // Conceptual aliases\n  // workInProgress : Fiber ->  alternate The alternate used for reuse happens\n  // to be the same as work in progress.\n  // __DEV__ only\n  _debugID?: number,\n  _debugSource?: Source | null,\n  _debugOwner?: Fiber | null,\n  _debugIsCurrentlyTiming?: boolean,\n  _debugNeedsRemount?: boolean,\n\n  // Used to verify that the order of hooks does not change between renders.\n  _debugHookTypes?: Array<HookType> | null,\n|};\n\nlet debugCounter = 1;\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.effectTag = NoEffect;\n  this.nextEffect = null;\n\n  this.firstEffect = null;\n  this.lastEffect = null;\n\n  this.expirationTime = NoWork;\n  this.childExpirationTime = NoWork;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  // This is normally DEV-only except www when it adds listeners.\n  // TODO: remove the User Timing integration in favor of Root Events.\n  if (enableUserTimingAPI) {\n    this._debugID = debugCounter++;\n    this._debugIsCurrentlyTiming = false;\n  }\n\n  if (__DEV__) {\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function (\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n    if (enableBlocksAPI) {\n      if ($$typeof === REACT_BLOCK_TYPE) {\n        return Block;\n      }\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// 构建 workInProgress Fiber 树中的 rootFiber\n// 构建完成后会替换 current fiber\n// 初始渲染 pendingProps 为 null\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  // current: current Fiber 中的 rootFiber\n  // 获取 current Fiber 对应的 workInProgress Fiber\n  let workInProgress = current.alternate;\n  // 如果 workInProgress 不存在\n  if (workInProgress === null) {\n    // 创建 fiber 对象\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    // 属性复用\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n      if (enableUserTimingAPI) {\n        workInProgress._debugID = current._debugID;\n      }\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n    // 使用 alternate 存储 current\n    workInProgress.alternate = current;\n    // 使用 alternate 存储 workInProgress\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.effectTag = NoEffect;\n\n    // The effect list is no longer valid.\n    workInProgress.nextEffect = null;\n    workInProgress.firstEffect = null;\n    workInProgress.lastEffect = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  workInProgress.childExpirationTime = current.childExpirationTime;\n  workInProgress.expirationTime = current.expirationTime;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          expirationTime: currentDependencies.expirationTime,\n          firstContext: currentDependencies.firstContext,\n          responders: currentDependencies.responders,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(\n  workInProgress: Fiber,\n  renderExpirationTime: ExpirationTime,\n) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect tag but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.effectTag &= Placement;\n\n  // The effect list is no longer valid.\n  workInProgress.nextEffect = null;\n  workInProgress.firstEffect = null;\n  workInProgress.lastEffect = null;\n\n  let current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childExpirationTime = NoWork;\n    workInProgress.expirationTime = renderExpirationTime;\n\n    workInProgress.child = null;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childExpirationTime = current.childExpirationTime;\n    workInProgress.expirationTime = current.expirationTime;\n\n    workInProgress.child = current.child;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            expirationTime: currentDependencies.expirationTime,\n            firstContext: currentDependencies.firstContext,\n            responders: currentDependencies.responders,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(tag: RootTag): Fiber {\n  // 根据 tag 值设置 mode\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode | BlockingMode | StrictMode;\n  } else if (tag === BlockingRoot) {\n    mode = BlockingMode | StrictMode;\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  expirationTime: ExpirationTime,\n): Fiber {\n  let fiber;\n\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(\n          pendingProps.children,\n          mode,\n          expirationTime,\n          key,\n        );\n      case REACT_CONCURRENT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= ConcurrentMode | BlockingMode | StrictMode;\n        break;\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictMode;\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(\n          pendingProps,\n          mode,\n          expirationTime,\n          key,\n        );\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n            case REACT_BLOCK_TYPE:\n              fiberTag = Block;\n              break getTag;\n            case REACT_FUNDAMENTAL_TYPE:\n              if (enableFundamentalAPI) {\n                return createFiberFromFundamental(\n                  type,\n                  pendingProps,\n                  mode,\n                  expirationTime,\n                  key,\n                );\n              }\n              break;\n            case REACT_SCOPE_TYPE:\n              if (enableScopeAPI) {\n                return createFiberFromScope(\n                  type,\n                  pendingProps,\n                  mode,\n                  expirationTime,\n                  key,\n                );\n              }\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentName(owner.type) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n        invariant(\n          false,\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            'but got: %s.%s',\n          type == null ? type : typeof type,\n          info,\n        );\n      }\n    }\n  }\n\n  fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.expirationTime = expirationTime;\n\n  return fiber;\n}\n\n// 根据 React Element 创建 Fiber 对象\nexport function createFiberFromElement(\n  element: ReactElement,\n  // 父级Fiber mode 子级需要继承\n  mode: TypeOfMode,\n  expirationTime: ExpirationTime,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    expirationTime,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  expirationTime: ExpirationTime,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nexport function createFiberFromFundamental(\n  fundamentalComponent: ReactFundamentalComponent<any, any>,\n  pendingProps: any,\n  mode: TypeOfMode,\n  expirationTime: ExpirationTime,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(FundamentalComponent, pendingProps, key, mode);\n  fiber.elementType = fundamentalComponent;\n  fiber.type = fundamentalComponent;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  expirationTime: ExpirationTime,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  expirationTime: ExpirationTime,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (\n      typeof pendingProps.id !== 'string' ||\n      typeof pendingProps.onRender !== 'function'\n    ) {\n      console.error(\n        'Profiler must specify an \"id\" string and \"onRender\" function as props',\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  // TODO: The Profiler fiber shouldn't have a type. It has a tag.\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.type = REACT_PROFILER_TYPE;\n  fiber.expirationTime = expirationTime;\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  expirationTime: ExpirationTime,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n\n  // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  fiber.type = REACT_SUSPENSE_TYPE;\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  expirationTime: ExpirationTime,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  if (__DEV__) {\n    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.\n    // This needs to be fixed in getComponentName so that it relies on the tag\n    // instead.\n    fiber.type = REACT_SUSPENSE_LIST_TYPE;\n  }\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  expirationTime: ExpirationTime,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  // TODO: These should not need a type.\n  fiber.elementType = 'DELETED';\n  fiber.type = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  expirationTime: ExpirationTime,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.expirationTime = expirationTime;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.effectTag = source.effectTag;\n  target.nextEffect = source.nextEffect;\n  target.firstEffect = source.firstEffect;\n  target.lastEffect = source.lastEffect;\n  target.expirationTime = source.expirationTime;\n  target.childExpirationTime = source.childExpirationTime;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n  if (enableUserTimingAPI) {\n    target._debugID = source._debugID;\n  }\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n"]},"metadata":{},"sourceType":"module"}