{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * \n */\nimport invariant from 'shared/invariant';\nimport { rethrowCaughtError } from 'shared/ReactErrorUtils';\nimport accumulateInto from './accumulateInto';\nimport forEachAccumulated from './forEachAccumulated';\nimport { executeDispatchesInOrder } from './EventPluginUtils';\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\n\nlet eventQueue = null;\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\n\nconst executeDispatchesAndRelease = function (event) {\n  if (event) {\n    executeDispatchesInOrder(event);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n\nconst executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e);\n};\n\nexport function runEventsInBatch(events) {\n  if (events !== null) {\n    eventQueue = accumulateInto(eventQueue, events);\n  } // Set `eventQueue` to null before processing it so that we can tell if more\n  // events get enqueued while processing.\n\n\n  const processingEventQueue = eventQueue;\n  eventQueue = null;\n\n  if (!processingEventQueue) {\n    return;\n  }\n\n  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n  invariant(!eventQueue, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.'); // This would be a good time to rethrow if any of the event handlers threw.\n\n  rethrowCaughtError();\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/legacy-events/EventBatching.js"],"names":["invariant","rethrowCaughtError","accumulateInto","forEachAccumulated","executeDispatchesInOrder","eventQueue","executeDispatchesAndRelease","event","isPersistent","constructor","release","executeDispatchesAndReleaseTopLevel","e","runEventsInBatch","events","processingEventQueue"],"mappings":"AAAA;;;;;;;AAQA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAAQC,kBAAR,QAAiC,wBAAjC;AAGA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAAQC,wBAAR,QAAuC,oBAAvC;AAEA;;;;;AAIA,IAAIC,UAA+D,GAAG,IAAtE;AAEA;;;;;;;AAMA,MAAMC,2BAA2B,GAAG,UAASC,KAAT,EAAqC;AACvE,MAAIA,KAAJ,EAAW;AACTH,IAAAA,wBAAwB,CAACG,KAAD,CAAxB;;AAEA,QAAI,CAACA,KAAK,CAACC,YAAN,EAAL,EAA2B;AACzBD,MAAAA,KAAK,CAACE,WAAN,CAAkBC,OAAlB,CAA0BH,KAA1B;AACD;AACF;AACF,CARD;;AASA,MAAMI,mCAAmC,GAAG,UAASC,CAAT,EAAY;AACtD,SAAON,2BAA2B,CAACM,CAAD,CAAlC;AACD,CAFD;;AAIA,OAAO,SAASC,gBAAT,CACLC,MADK,EAEL;AACA,MAAIA,MAAM,KAAK,IAAf,EAAqB;AACnBT,IAAAA,UAAU,GAAGH,cAAc,CAACG,UAAD,EAAaS,MAAb,CAA3B;AACD,GAHD,CAKA;AACA;;;AACA,QAAMC,oBAAoB,GAAGV,UAA7B;AACAA,EAAAA,UAAU,GAAG,IAAb;;AAEA,MAAI,CAACU,oBAAL,EAA2B;AACzB;AACD;;AAEDZ,EAAAA,kBAAkB,CAACY,oBAAD,EAAuBJ,mCAAvB,CAAlB;AACAX,EAAAA,SAAS,CACP,CAACK,UADM,EAEP,2EACE,gEAHK,CAAT,CAfA,CAoBA;;AACAJ,EAAAA,kBAAkB;AACnB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport invariant from 'shared/invariant';\nimport {rethrowCaughtError} from 'shared/ReactErrorUtils';\n\nimport type {ReactSyntheticEvent} from './ReactSyntheticEventType';\nimport accumulateInto from './accumulateInto';\nimport forEachAccumulated from './forEachAccumulated';\nimport {executeDispatchesInOrder} from './EventPluginUtils';\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nlet eventQueue: ?(Array<ReactSyntheticEvent> | ReactSyntheticEvent) = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\nconst executeDispatchesAndRelease = function(event: ReactSyntheticEvent) {\n  if (event) {\n    executeDispatchesInOrder(event);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nconst executeDispatchesAndReleaseTopLevel = function(e) {\n  return executeDispatchesAndRelease(e);\n};\n\nexport function runEventsInBatch(\n  events: Array<ReactSyntheticEvent> | ReactSyntheticEvent | null,\n) {\n  if (events !== null) {\n    eventQueue = accumulateInto(eventQueue, events);\n  }\n\n  // Set `eventQueue` to null before processing it so that we can tell if more\n  // events get enqueued while processing.\n  const processingEventQueue = eventQueue;\n  eventQueue = null;\n\n  if (!processingEventQueue) {\n    return;\n  }\n\n  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n  invariant(\n    !eventQueue,\n    'processEventQueue(): Additional events were enqueued while processing ' +\n      'an event queue. Support for this has not yet been implemented.',\n  );\n  // This would be a good time to rethrow if any of the event handlers threw.\n  rethrowCaughtError();\n}\n"]},"metadata":{},"sourceType":"module"}