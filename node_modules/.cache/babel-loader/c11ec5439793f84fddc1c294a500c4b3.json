{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nimport { getToStringValue, toString } from './ToStringValue';\nlet didWarnSelectedSetOnOption = false;\nlet didWarnInvalidChild = false;\n\nfunction flattenChildren(children) {\n  let content = ''; // Flatten children. We'll warn if they are invalid\n  // during validateProps() which runs for hydration too.\n  // Note that this would throw on non-element objects.\n  // Elements are stringified (which is normally irrelevant\n  // but matters for <fbt>).\n\n  React.Children.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n\n    content += child; // Note: we don't warn about invalid children here.\n    // Instead, this is done separately below so that\n    // it happens during the hydration codepath too.\n  });\n  return content;\n}\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\n\nexport function validateProps(element, props) {\n  if (__DEV__) {\n    // This mirrors the codepath above, but runs for hydration too.\n    // Warn about invalid children here so that client and hydration are consistent.\n    // TODO: this seems like it could cause a DEV-only throw for hydration\n    // if children contains a non-element object. We should try to avoid that.\n    if (typeof props.children === 'object' && props.children !== null) {\n      React.Children.forEach(props.children, function (child) {\n        if (child == null) {\n          return;\n        }\n\n        if (typeof child === 'string' || typeof child === 'number') {\n          return;\n        }\n\n        if (typeof child.type !== 'string') {\n          return;\n        }\n\n        if (!didWarnInvalidChild) {\n          didWarnInvalidChild = true;\n          console.error('Only strings and numbers are supported as <option> children.');\n        }\n      });\n    } // TODO: Remove support for `selected` in <option>.\n\n\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      console.error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\nexport function postMountWrapper(element, props) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', toString(getToStringValue(props.value)));\n  }\n}\nexport function getHostProps(element, props) {\n  const hostProps = {\n    children: undefined,\n    ...props\n  };\n  const content = flattenChildren(props.children);\n\n  if (content) {\n    hostProps.children = content;\n  }\n\n  return hostProps;\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-dom/src/client/ReactDOMOption.js"],"names":["React","getToStringValue","toString","didWarnSelectedSetOnOption","didWarnInvalidChild","flattenChildren","children","content","Children","forEach","child","validateProps","element","props","__DEV__","type","console","error","selected","postMountWrapper","value","setAttribute","getHostProps","hostProps","undefined"],"mappings":"AAAA;;;;;;;;AASA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,gBAAR,EAA0BC,QAA1B,QAAyC,iBAAzC;AAEA,IAAIC,0BAA0B,GAAG,KAAjC;AACA,IAAIC,mBAAmB,GAAG,KAA1B;;AAEA,SAASC,eAAT,CAAyBC,QAAzB,EAAmC;AACjC,MAAIC,OAAO,GAAG,EAAd,CADiC,CAGjC;AACA;AACA;AACA;AACA;;AACAP,EAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBH,QAAvB,EAAiC,UAASI,KAAT,EAAgB;AAC/C,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB;AACD;;AACDH,IAAAA,OAAO,IAAIG,KAAX,CAJ+C,CAK/C;AACA;AACA;AACD,GARD;AAUA,SAAOH,OAAP;AACD;AAED;;;;;AAIA,OAAO,SAASI,aAAT,CAAuBC,OAAvB,EAAyCC,KAAzC,EAAwD;AAC7D,MAAIC,OAAJ,EAAa;AACX;AACA;AACA;AACA;AACA,QAAI,OAAOD,KAAK,CAACP,QAAb,KAA0B,QAA1B,IAAsCO,KAAK,CAACP,QAAN,KAAmB,IAA7D,EAAmE;AACjEN,MAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBI,KAAK,CAACP,QAA7B,EAAuC,UAASI,KAAT,EAAgB;AACrD,YAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB;AACD;;AACD,YAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AAC1D;AACD;;AACD,YAAI,OAAOA,KAAK,CAACK,IAAb,KAAsB,QAA1B,EAAoC;AAClC;AACD;;AACD,YAAI,CAACX,mBAAL,EAA0B;AACxBA,UAAAA,mBAAmB,GAAG,IAAtB;AACAY,UAAAA,OAAO,CAACC,KAAR,CACE,8DADF;AAGD;AACF,OAhBD;AAiBD,KAvBU,CAyBX;;;AACA,QAAIJ,KAAK,CAACK,QAAN,IAAkB,IAAlB,IAA0B,CAACf,0BAA/B,EAA2D;AACzDa,MAAAA,OAAO,CAACC,KAAR,CACE,oEACE,iCAFJ;AAIAd,MAAAA,0BAA0B,GAAG,IAA7B;AACD;AACF;AACF;AAED,OAAO,SAASgB,gBAAT,CAA0BP,OAA1B,EAA4CC,KAA5C,EAA2D;AAChE;AACA,MAAIA,KAAK,CAACO,KAAN,IAAe,IAAnB,EAAyB;AACvBR,IAAAA,OAAO,CAACS,YAAR,CAAqB,OAArB,EAA8BnB,QAAQ,CAACD,gBAAgB,CAACY,KAAK,CAACO,KAAP,CAAjB,CAAtC;AACD;AACF;AAED,OAAO,SAASE,YAAT,CAAsBV,OAAtB,EAAwCC,KAAxC,EAAuD;AAC5D,QAAMU,SAAS,GAAG;AAACjB,IAAAA,QAAQ,EAAEkB,SAAX;AAAsB,OAAGX;AAAzB,GAAlB;AACA,QAAMN,OAAO,GAAGF,eAAe,CAACQ,KAAK,CAACP,QAAP,CAA/B;;AAEA,MAAIC,OAAJ,EAAa;AACXgB,IAAAA,SAAS,CAACjB,QAAV,GAAqBC,OAArB;AACD;;AAED,SAAOgB,SAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\nimport {getToStringValue, toString} from './ToStringValue';\n\nlet didWarnSelectedSetOnOption = false;\nlet didWarnInvalidChild = false;\n\nfunction flattenChildren(children) {\n  let content = '';\n\n  // Flatten children. We'll warn if they are invalid\n  // during validateProps() which runs for hydration too.\n  // Note that this would throw on non-element objects.\n  // Elements are stringified (which is normally irrelevant\n  // but matters for <fbt>).\n  React.Children.forEach(children, function(child) {\n    if (child == null) {\n      return;\n    }\n    content += child;\n    // Note: we don't warn about invalid children here.\n    // Instead, this is done separately below so that\n    // it happens during the hydration codepath too.\n  });\n\n  return content;\n}\n\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nexport function validateProps(element: Element, props: Object) {\n  if (__DEV__) {\n    // This mirrors the codepath above, but runs for hydration too.\n    // Warn about invalid children here so that client and hydration are consistent.\n    // TODO: this seems like it could cause a DEV-only throw for hydration\n    // if children contains a non-element object. We should try to avoid that.\n    if (typeof props.children === 'object' && props.children !== null) {\n      React.Children.forEach(props.children, function(child) {\n        if (child == null) {\n          return;\n        }\n        if (typeof child === 'string' || typeof child === 'number') {\n          return;\n        }\n        if (typeof child.type !== 'string') {\n          return;\n        }\n        if (!didWarnInvalidChild) {\n          didWarnInvalidChild = true;\n          console.error(\n            'Only strings and numbers are supported as <option> children.',\n          );\n        }\n      });\n    }\n\n    // TODO: Remove support for `selected` in <option>.\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      console.error(\n        'Use the `defaultValue` or `value` props on <select> instead of ' +\n          'setting `selected` on <option>.',\n      );\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\n\nexport function postMountWrapper(element: Element, props: Object) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', toString(getToStringValue(props.value)));\n  }\n}\n\nexport function getHostProps(element: Element, props: Object) {\n  const hostProps = {children: undefined, ...props};\n  const content = flattenChildren(props.children);\n\n  if (content) {\n    hostProps.children = content;\n  }\n\n  return hostProps;\n}\n"]},"metadata":{},"sourceType":"module"}