{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport SyntheticUIEvent from './SyntheticUIEvent';\nimport getEventCharCode from './getEventCharCode';\nimport getEventKey from './getEventKey';\nimport getEventModifierState from './getEventModifierState';\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\nconst SyntheticKeyboardEvent = SyntheticUIEvent.extend({\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n\n    return 0;\n  }\n});\nexport default SyntheticKeyboardEvent;","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-dom/src/events/SyntheticKeyboardEvent.js"],"names":["SyntheticUIEvent","getEventCharCode","getEventKey","getEventModifierState","SyntheticKeyboardEvent","extend","key","location","ctrlKey","shiftKey","altKey","metaKey","repeat","locale","getModifierState","charCode","event","type","keyCode","which"],"mappings":"AAAA;;;;;;AAOA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA;;;;;AAIA,MAAMC,sBAAsB,GAAGJ,gBAAgB,CAACK,MAAjB,CAAwB;AACrDC,EAAAA,GAAG,EAAEJ,WADgD;AAErDK,EAAAA,QAAQ,EAAE,IAF2C;AAGrDC,EAAAA,OAAO,EAAE,IAH4C;AAIrDC,EAAAA,QAAQ,EAAE,IAJ2C;AAKrDC,EAAAA,MAAM,EAAE,IAL6C;AAMrDC,EAAAA,OAAO,EAAE,IAN4C;AAOrDC,EAAAA,MAAM,EAAE,IAP6C;AAQrDC,EAAAA,MAAM,EAAE,IAR6C;AASrDC,EAAAA,gBAAgB,EAAEX,qBATmC;AAUrD;AACAY,EAAAA,QAAQ,EAAE,UAASC,KAAT,EAAgB;AACxB;AACA;AAEA;AACA;AACA,QAAIA,KAAK,CAACC,IAAN,KAAe,UAAnB,EAA+B;AAC7B,aAAOhB,gBAAgB,CAACe,KAAD,CAAvB;AACD;;AACD,WAAO,CAAP;AACD,GArBoD;AAsBrDE,EAAAA,OAAO,EAAE,UAASF,KAAT,EAAgB;AACvB;AACA;AAEA;AACA;AACA;AACA;AACA,QAAIA,KAAK,CAACC,IAAN,KAAe,SAAf,IAA4BD,KAAK,CAACC,IAAN,KAAe,OAA/C,EAAwD;AACtD,aAAOD,KAAK,CAACE,OAAb;AACD;;AACD,WAAO,CAAP;AACD,GAlCoD;AAmCrDC,EAAAA,KAAK,EAAE,UAASH,KAAT,EAAgB;AACrB;AACA;AACA,QAAIA,KAAK,CAACC,IAAN,KAAe,UAAnB,EAA+B;AAC7B,aAAOhB,gBAAgB,CAACe,KAAD,CAAvB;AACD;;AACD,QAAIA,KAAK,CAACC,IAAN,KAAe,SAAf,IAA4BD,KAAK,CAACC,IAAN,KAAe,OAA/C,EAAwD;AACtD,aAAOD,KAAK,CAACE,OAAb;AACD;;AACD,WAAO,CAAP;AACD;AA7CoD,CAAxB,CAA/B;AAgDA,eAAed,sBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport SyntheticUIEvent from './SyntheticUIEvent';\nimport getEventCharCode from './getEventCharCode';\nimport getEventKey from './getEventKey';\nimport getEventModifierState from './getEventModifierState';\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst SyntheticKeyboardEvent = SyntheticUIEvent.extend({\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function(event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function(event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function(event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n});\n\nexport default SyntheticKeyboardEvent;\n"]},"metadata":{},"sourceType":"module"}