{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { isPrimaryRenderer } from './ReactFiberHostConfig';\nimport { createCursor, push, pop } from './ReactFiberStack';\nimport MAX_SIGNED_31_BIT_INT from './maxSigned31BitInt';\nimport { ContextProvider, ClassComponent, DehydratedFragment } from 'shared/ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport is from 'shared/objectIs';\nimport { createUpdate, enqueueUpdate, ForceUpdate } from 'react-reconciler/src/ReactUpdateQueue';\nimport { NoWork } from './ReactFiberExpirationTime';\nimport { markWorkInProgressReceivedUpdate } from './ReactFiberBeginWork';\nimport { enableSuspenseServerRenderer } from 'shared/ReactFeatureFlags';\nconst valueCursor = createCursor(null);\nlet rendererSigil;\n\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber = null;\nlet lastContextDependency = null;\nlet lastContextWithAllBitsObserved = null;\nlet isDisallowedContextReadInDEV = false;\nexport function resetContextDependencies() {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nexport function enterDisallowedContextReadInDEV() {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\nexport function exitDisallowedContextReadInDEV() {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nexport function pushProvider(providerFiber, nextValue) {\n  const context = providerFiber.type._context;\n\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n    context._currentValue = nextValue;\n\n    if (__DEV__) {\n      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n        console.error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n    context._currentValue2 = nextValue;\n\n    if (__DEV__) {\n      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n        console.error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\nexport function popProvider(providerFiber) {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  const context = providerFiber.type._context;\n\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n  } else {\n    context._currentValue2 = currentValue;\n  }\n}\nexport function calculateChangedBits(context, newValue, oldValue) {\n  if (is(oldValue, newValue)) {\n    // No change\n    return 0;\n  } else {\n    const changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n    if (__DEV__) {\n      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {\n        console.error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);\n      }\n    }\n\n    return changedBits | 0;\n  }\n}\nexport function scheduleWorkOnParentPath(parent, renderExpirationTime) {\n  // Update the child expiration time of all the ancestors, including\n  // the alternates.\n  let node = parent;\n\n  while (node !== null) {\n    let alternate = node.alternate;\n\n    if (node.childExpirationTime < renderExpirationTime) {\n      node.childExpirationTime = renderExpirationTime;\n\n      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {\n        alternate.childExpirationTime = renderExpirationTime;\n      }\n    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {\n      alternate.childExpirationTime = renderExpirationTime;\n    } else {\n      // Neither alternate was updated, which means the rest of the\n      // ancestor path already has sufficient priority.\n      break;\n    }\n\n    node = node.return;\n  }\n}\nexport function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {\n  let fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    let nextFiber; // Visit this fiber.\n\n    const list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      let dependency = list.firstContext;\n\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const update = createUpdate(renderExpirationTime, null);\n            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            enqueueUpdate(fiber, update);\n          }\n\n          if (fiber.expirationTime < renderExpirationTime) {\n            fiber.expirationTime = renderExpirationTime;\n          }\n\n          let alternate = fiber.alternate;\n\n          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {\n            alternate.expirationTime = renderExpirationTime;\n          }\n\n          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.\n\n          if (list.expirationTime < renderExpirationTime) {\n            list.expirationTime = renderExpirationTime;\n          } // Since we already found a match, we can stop traversing the\n          // dependency list.\n\n\n          break;\n        }\n\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense bounudary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      let parentSuspense = fiber.return;\n      invariant(parentSuspense !== null, 'We just came from a parent so we must have had a parent. This is a bug in React.');\n\n      if (parentSuspense.expirationTime < renderExpirationTime) {\n        parentSuspense.expirationTime = renderExpirationTime;\n      }\n\n      let alternate = parentSuspense.alternate;\n\n      if (alternate !== null && alternate.expirationTime < renderExpirationTime) {\n        alternate.expirationTime = renderExpirationTime;\n      } // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childExpirationTime on\n      // this fiber to indicate that a context has changed.\n\n\n      scheduleWorkOnParentPath(parentSuspense, renderExpirationTime);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        let sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\nexport function prepareToReadContext(workInProgress, renderExpirationTime) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n  const dependencies = workInProgress.dependencies;\n\n  if (dependencies !== null) {\n    const firstContext = dependencies.firstContext;\n\n    if (firstContext !== null) {\n      if (dependencies.expirationTime >= renderExpirationTime) {\n        // Context list has a pending update. Mark that this fiber performed work.\n        markWorkInProgressReceivedUpdate();\n      } // Reset the work-in-progress list\n\n\n      dependencies.firstContext = null;\n    }\n  }\n}\nexport function readContext(context, observedBits) {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  if (lastContextWithAllBitsObserved === context) {// Nothing to do. We already observe everything in this context.\n  } else if (observedBits === false || observedBits === 0) {// Do not observe any updates.\n  } else {\n    let resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.\n\n    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {\n      // Observe all updates.\n      lastContextWithAllBitsObserved = context;\n      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;\n    } else {\n      resolvedObservedBits = observedBits;\n    }\n\n    let contextItem = {\n      context: context,\n      observedBits: resolvedObservedBits,\n      next: null\n    };\n\n    if (lastContextDependency === null) {\n      invariant(currentlyRenderingFiber !== null, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().'); // This is the first dependency for this component. Create a new list.\n\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        expirationTime: NoWork,\n        firstContext: contextItem,\n        responders: null\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n\n  return isPrimaryRenderer ? context._currentValue : context._currentValue2;\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-reconciler/src/ReactFiberNewContext.js"],"names":["isPrimaryRenderer","createCursor","push","pop","MAX_SIGNED_31_BIT_INT","ContextProvider","ClassComponent","DehydratedFragment","invariant","is","createUpdate","enqueueUpdate","ForceUpdate","NoWork","markWorkInProgressReceivedUpdate","enableSuspenseServerRenderer","valueCursor","rendererSigil","__DEV__","currentlyRenderingFiber","lastContextDependency","lastContextWithAllBitsObserved","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","context","type","_context","_currentValue","_currentRenderer","undefined","console","error","_currentValue2","_currentRenderer2","popProvider","currentValue","current","calculateChangedBits","newValue","oldValue","changedBits","_calculateChangedBits","scheduleWorkOnParentPath","parent","renderExpirationTime","node","alternate","childExpirationTime","return","propagateContextChange","workInProgress","fiber","child","nextFiber","list","dependencies","dependency","firstContext","observedBits","tag","update","expirationTime","next","parentSuspense","sibling","prepareToReadContext","readContext","resolvedObservedBits","contextItem","responders"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactFiber';\nimport type {StackCursor} from './ReactFiberStack';\nimport type {ExpirationTime} from './ReactFiberExpirationTime';\n\nexport type ContextDependency<T> = {\n  context: ReactContext<T>,\n  observedBits: number,\n  next: ContextDependency<mixed> | null,\n  ...\n};\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack';\nimport MAX_SIGNED_31_BIT_INT from './maxSigned31BitInt';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from 'shared/ReactWorkTags';\n\nimport invariant from 'shared/invariant';\nimport is from 'shared/objectIs';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  ForceUpdate,\n} from 'react-reconciler/src/ReactUpdateQueue';\nimport {NoWork} from './ReactFiberExpirationTime';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastContextWithAllBitsObserved: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(providerFiber: Fiber, nextValue: T): void {\n  const context: ReactContext<T> = providerFiber.type._context;\n\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(providerFiber: Fiber): void {\n  const currentValue = valueCursor.current;\n\n  pop(valueCursor, providerFiber);\n\n  const context: ReactContext<any> = providerFiber.type._context;\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n  } else {\n    context._currentValue2 = currentValue;\n  }\n}\n\nexport function calculateChangedBits<T>(\n  context: ReactContext<T>,\n  newValue: T,\n  oldValue: T,\n) {\n  if (is(oldValue, newValue)) {\n    // No change\n    return 0;\n  } else {\n    const changedBits =\n      typeof context._calculateChangedBits === 'function'\n        ? context._calculateChangedBits(oldValue, newValue)\n        : MAX_SIGNED_31_BIT_INT;\n\n    if (__DEV__) {\n      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {\n        console.error(\n          'calculateChangedBits: Expected the return value to be a ' +\n            '31-bit integer. Instead received: %s',\n          changedBits,\n        );\n      }\n    }\n    return changedBits | 0;\n  }\n}\n\nexport function scheduleWorkOnParentPath(\n  parent: Fiber | null,\n  renderExpirationTime: ExpirationTime,\n) {\n  // Update the child expiration time of all the ancestors, including\n  // the alternates.\n  let node = parent;\n  while (node !== null) {\n    let alternate = node.alternate;\n    if (node.childExpirationTime < renderExpirationTime) {\n      node.childExpirationTime = renderExpirationTime;\n      if (\n        alternate !== null &&\n        alternate.childExpirationTime < renderExpirationTime\n      ) {\n        alternate.childExpirationTime = renderExpirationTime;\n      }\n    } else if (\n      alternate !== null &&\n      alternate.childExpirationTime < renderExpirationTime\n    ) {\n      alternate.childExpirationTime = renderExpirationTime;\n    } else {\n      // Neither alternate was updated, which means the rest of the\n      // ancestor path already has sufficient priority.\n      break;\n    }\n    node = node.return;\n  }\n}\n\nexport function propagateContextChange(\n  workInProgress: Fiber,\n  context: ReactContext<mixed>,\n  changedBits: number,\n  renderExpirationTime: ExpirationTime,\n): void {\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (\n          dependency.context === context &&\n          (dependency.observedBits & changedBits) !== 0\n        ) {\n          // Match! Schedule an update on this fiber.\n\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const update = createUpdate(renderExpirationTime, null);\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            enqueueUpdate(fiber, update);\n          }\n\n          if (fiber.expirationTime < renderExpirationTime) {\n            fiber.expirationTime = renderExpirationTime;\n          }\n          let alternate = fiber.alternate;\n          if (\n            alternate !== null &&\n            alternate.expirationTime < renderExpirationTime\n          ) {\n            alternate.expirationTime = renderExpirationTime;\n          }\n\n          scheduleWorkOnParentPath(fiber.return, renderExpirationTime);\n\n          // Mark the expiration time on the list, too.\n          if (list.expirationTime < renderExpirationTime) {\n            list.expirationTime = renderExpirationTime;\n          }\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense bounudary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      let parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      if (parentSuspense.expirationTime < renderExpirationTime) {\n        parentSuspense.expirationTime = renderExpirationTime;\n      }\n      let alternate = parentSuspense.alternate;\n      if (\n        alternate !== null &&\n        alternate.expirationTime < renderExpirationTime\n      ) {\n        alternate.expirationTime = renderExpirationTime;\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childExpirationTime on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderExpirationTime);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        let sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderExpirationTime: ExpirationTime,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    const firstContext = dependencies.firstContext;\n    if (firstContext !== null) {\n      if (dependencies.expirationTime >= renderExpirationTime) {\n        // Context list has a pending update. Mark that this fiber performed work.\n        markWorkInProgressReceivedUpdate();\n      }\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    }\n  }\n}\n\nexport function readContext<T>(\n  context: ReactContext<T>,\n  observedBits: void | number | boolean,\n): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  if (lastContextWithAllBitsObserved === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else if (observedBits === false || observedBits === 0) {\n    // Do not observe any updates.\n  } else {\n    let resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.\n    if (\n      typeof observedBits !== 'number' ||\n      observedBits === MAX_SIGNED_31_BIT_INT\n    ) {\n      // Observe all updates.\n      lastContextWithAllBitsObserved = ((context: any): ReactContext<mixed>);\n      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;\n    } else {\n      resolvedObservedBits = observedBits;\n    }\n\n    let contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      observedBits: resolvedObservedBits,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      invariant(\n        currentlyRenderingFiber !== null,\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        expirationTime: NoWork,\n        firstContext: contextItem,\n        responders: null,\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return isPrimaryRenderer ? context._currentValue : context._currentValue2;\n}\n"]},"metadata":{},"sourceType":"module"}