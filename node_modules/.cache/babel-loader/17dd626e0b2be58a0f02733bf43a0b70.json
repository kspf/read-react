{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * \n */\nimport { REACT_RESPONDER_TYPE } from 'shared/ReactSymbols';\nimport { hasBadMapPolyfill } from './hasBadMapPolyfill';\nexport default function createEventResponder(displayName, responderConfig) {\n  const {\n    getInitialState,\n    onEvent,\n    onMount,\n    onUnmount,\n    onRootEvent,\n    rootEventTypes,\n    targetEventTypes,\n    targetPortalPropagation\n  } = responderConfig;\n  const eventResponder = {\n    $$typeof: REACT_RESPONDER_TYPE,\n    displayName,\n    getInitialState: getInitialState || null,\n    onEvent: onEvent || null,\n    onMount: onMount || null,\n    onRootEvent: onRootEvent || null,\n    onUnmount: onUnmount || null,\n    rootEventTypes: rootEventTypes || null,\n    targetEventTypes: targetEventTypes || null,\n    targetPortalPropagation: targetPortalPropagation || false\n  }; // We use responder as a Map key later on. When we have a bad\n  // polyfill, then we can't use it as a key as the polyfill tries\n  // to add a property to the object.\n\n  if (__DEV__ && !hasBadMapPolyfill) {\n    Object.freeze(eventResponder);\n  }\n\n  return eventResponder;\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/shared/createEventResponder.js"],"names":["REACT_RESPONDER_TYPE","hasBadMapPolyfill","createEventResponder","displayName","responderConfig","getInitialState","onEvent","onMount","onUnmount","onRootEvent","rootEventTypes","targetEventTypes","targetPortalPropagation","eventResponder","$$typeof","__DEV__","Object","freeze"],"mappings":"AAAA;;;;;;;AASA,SAAQA,oBAAR,QAAmC,qBAAnC;AACA,SAAQC,iBAAR,QAAgC,qBAAhC;AAEA,eAAe,SAASC,oBAAT,CACbC,WADa,EAEbC,eAFa,EAGc;AAC3B,QAAM;AACJC,IAAAA,eADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,cANI;AAOJC,IAAAA,gBAPI;AAQJC,IAAAA;AARI,MASFR,eATJ;AAUA,QAAMS,cAAc,GAAG;AACrBC,IAAAA,QAAQ,EAAEd,oBADW;AAErBG,IAAAA,WAFqB;AAGrBE,IAAAA,eAAe,EAAEA,eAAe,IAAI,IAHf;AAIrBC,IAAAA,OAAO,EAAEA,OAAO,IAAI,IAJC;AAKrBC,IAAAA,OAAO,EAAEA,OAAO,IAAI,IALC;AAMrBE,IAAAA,WAAW,EAAEA,WAAW,IAAI,IANP;AAOrBD,IAAAA,SAAS,EAAEA,SAAS,IAAI,IAPH;AAQrBE,IAAAA,cAAc,EAAEA,cAAc,IAAI,IARb;AASrBC,IAAAA,gBAAgB,EAAEA,gBAAgB,IAAI,IATjB;AAUrBC,IAAAA,uBAAuB,EAAEA,uBAAuB,IAAI;AAV/B,GAAvB,CAX2B,CAuB3B;AACA;AACA;;AACA,MAAIG,OAAO,IAAI,CAACd,iBAAhB,EAAmC;AACjCe,IAAAA,MAAM,CAACC,MAAP,CAAcJ,cAAd;AACD;;AACD,SAAOA,cAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport type {ReactEventResponder} from 'shared/ReactTypes';\nimport {REACT_RESPONDER_TYPE} from 'shared/ReactSymbols';\nimport {hasBadMapPolyfill} from './hasBadMapPolyfill';\n\nexport default function createEventResponder<E, C>(\n  displayName: string,\n  responderConfig: Object,\n): ReactEventResponder<E, C> {\n  const {\n    getInitialState,\n    onEvent,\n    onMount,\n    onUnmount,\n    onRootEvent,\n    rootEventTypes,\n    targetEventTypes,\n    targetPortalPropagation,\n  } = responderConfig;\n  const eventResponder = {\n    $$typeof: REACT_RESPONDER_TYPE,\n    displayName,\n    getInitialState: getInitialState || null,\n    onEvent: onEvent || null,\n    onMount: onMount || null,\n    onRootEvent: onRootEvent || null,\n    onUnmount: onUnmount || null,\n    rootEventTypes: rootEventTypes || null,\n    targetEventTypes: targetEventTypes || null,\n    targetPortalPropagation: targetPortalPropagation || false,\n  };\n  // We use responder as a Map key later on. When we have a bad\n  // polyfill, then we can't use it as a key as the polyfill tries\n  // to add a property to the object.\n  if (__DEV__ && !hasBadMapPolyfill) {\n    Object.freeze(eventResponder);\n  }\n  return eventResponder;\n}\n"]},"metadata":{},"sourceType":"module"}