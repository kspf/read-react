{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { enableProfilerTimer } from 'shared/ReactFeatureFlags'; // Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\n\nimport * as Scheduler from 'scheduler';\nconst {\n  unstable_now: now\n} = Scheduler;\nlet commitTime = 0;\nlet profilerStartTime = -1;\n\nfunction getCommitTime() {\n  return commitTime;\n}\n\nfunction recordCommitTime() {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber) {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (fiber.actualStartTime < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber) {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n\n    profilerStartTime = -1;\n  }\n}\n\nexport { getCommitTime, recordCommitTime, startProfilerTimer, stopProfilerTimerIfRunning, stopProfilerTimerIfRunningAndRecordDelta };","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-reconciler/src/ReactProfilerTimer.js"],"names":["enableProfilerTimer","Scheduler","unstable_now","now","commitTime","profilerStartTime","getCommitTime","recordCommitTime","startProfilerTimer","fiber","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration"],"mappings":"AAAA;;;;;;;;AAWA,SAAQA,mBAAR,QAAkC,0BAAlC,C,CAEA;AACA;;AACA,OAAO,KAAKC,SAAZ,MAA2B,WAA3B;AAEA,MAAM;AAACC,EAAAA,YAAY,EAAEC;AAAf,IAAsBF,SAA5B;AAWA,IAAIG,UAAkB,GAAG,CAAzB;AACA,IAAIC,iBAAyB,GAAG,CAAC,CAAjC;;AAEA,SAASC,aAAT,GAAiC;AAC/B,SAAOF,UAAP;AACD;;AAED,SAASG,gBAAT,GAAkC;AAChC,MAAI,CAACP,mBAAL,EAA0B;AACxB;AACD;;AACDI,EAAAA,UAAU,GAAGD,GAAG,EAAhB;AACD;;AAED,SAASK,kBAAT,CAA4BC,KAA5B,EAAgD;AAC9C,MAAI,CAACT,mBAAL,EAA0B;AACxB;AACD;;AAEDK,EAAAA,iBAAiB,GAAGF,GAAG,EAAvB;;AAEA,MAAMM,KAAK,CAACC,eAAR,GAAyC,CAA7C,EAAgD;AAC9CD,IAAAA,KAAK,CAACC,eAAN,GAAwBP,GAAG,EAA3B;AACD;AACF;;AAED,SAASQ,0BAAT,CAAoCF,KAApC,EAAwD;AACtD,MAAI,CAACT,mBAAL,EAA0B;AACxB;AACD;;AACDK,EAAAA,iBAAiB,GAAG,CAAC,CAArB;AACD;;AAED,SAASO,wCAAT,CACEH,KADF,EAEEI,gBAFF,EAGQ;AACN,MAAI,CAACb,mBAAL,EAA0B;AACxB;AACD;;AAED,MAAIK,iBAAiB,IAAI,CAAzB,EAA4B;AAC1B,UAAMS,WAAW,GAAGX,GAAG,KAAKE,iBAA5B;AACAI,IAAAA,KAAK,CAACM,cAAN,IAAwBD,WAAxB;;AACA,QAAID,gBAAJ,EAAsB;AACpBJ,MAAAA,KAAK,CAACO,gBAAN,GAAyBF,WAAzB;AACD;;AACDT,IAAAA,iBAAiB,GAAG,CAAC,CAArB;AACD;AACF;;AAED,SACEC,aADF,EAEEC,gBAFF,EAGEC,kBAHF,EAIEG,0BAJF,EAKEC,wCALF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactFiber';\n\nimport {enableProfilerTimer} from 'shared/ReactFeatureFlags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet profilerStartTime: number = -1;\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nexport {\n  getCommitTime,\n  recordCommitTime,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n};\n"]},"metadata":{},"sourceType":"module"}