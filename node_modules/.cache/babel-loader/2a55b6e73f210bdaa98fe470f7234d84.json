{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction isCheckable(elem) {\n  const type = elem.type;\n  const nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\n\nfunction getTracker(node) {\n  return node._valueTracker;\n}\n\nfunction detachTracker(node) {\n  node._valueTracker = null;\n}\n\nfunction getValueFromNode(node) {\n  let value = '';\n\n  if (!node) {\n    return value;\n  }\n\n  if (isCheckable(node)) {\n    value = node.checked ? 'true' : 'false';\n  } else {\n    value = node.value;\n  }\n\n  return value;\n}\n\nfunction trackValueOnNode(node) {\n  const valueField = isCheckable(node) ? 'checked' : 'value';\n  const descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n  let currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail\n  // and don't track value will cause over reporting of changes,\n  // but it's better then a hard failure\n  // (needed for certain tests that spyOn input values and Safari)\n\n  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n    return;\n  }\n\n  const {\n    get,\n    set\n  } = descriptor;\n  Object.defineProperty(node, valueField, {\n    configurable: true,\n    get: function () {\n      return get.call(this);\n    },\n    set: function (value) {\n      currentValue = '' + value;\n      set.call(this, value);\n    }\n  }); // We could've passed this the first time\n  // but it triggers a bug in IE11 and Edge 14/15.\n  // Calling defineProperty() again should be equivalent.\n  // https://github.com/facebook/react/issues/11768\n\n  Object.defineProperty(node, valueField, {\n    enumerable: descriptor.enumerable\n  });\n  const tracker = {\n    getValue() {\n      return currentValue;\n    },\n\n    setValue(value) {\n      currentValue = '' + value;\n    },\n\n    stopTracking() {\n      detachTracker(node);\n      delete node[valueField];\n    }\n\n  };\n  return tracker;\n}\n\nexport function track(node) {\n  if (getTracker(node)) {\n    return;\n  } // TODO: Once it's just Fiber we can move this to node._wrapperState\n\n\n  node._valueTracker = trackValueOnNode(node);\n}\nexport function updateValueIfChanged(node) {\n  if (!node) {\n    return false;\n  }\n\n  const tracker = getTracker(node); // if there is no tracker at this point it's unlikely\n  // that trying again will succeed\n\n  if (!tracker) {\n    return true;\n  }\n\n  const lastValue = tracker.getValue();\n  const nextValue = getValueFromNode(node);\n\n  if (nextValue !== lastValue) {\n    tracker.setValue(nextValue);\n    return true;\n  }\n\n  return false;\n}\nexport function stopTracking(node) {\n  const tracker = getTracker(node);\n\n  if (tracker) {\n    tracker.stopTracking();\n  }\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-dom/src/client/inputValueTracking.js"],"names":["isCheckable","elem","type","nodeName","toLowerCase","getTracker","node","_valueTracker","detachTracker","getValueFromNode","value","checked","trackValueOnNode","valueField","descriptor","Object","getOwnPropertyDescriptor","constructor","prototype","currentValue","hasOwnProperty","get","set","defineProperty","configurable","call","enumerable","tracker","getValue","setValue","stopTracking","track","updateValueIfChanged","lastValue","nextValue"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ntype ValueTracker = {|\n  getValue(): string,\n  setValue(value: string): void,\n  stopTracking(): void,\n|};\ntype WrapperState = {_valueTracker?: ?ValueTracker, ...};\ntype ElementWithValueTracker = HTMLInputElement & WrapperState;\n\nfunction isCheckable(elem: HTMLInputElement) {\n  const type = elem.type;\n  const nodeName = elem.nodeName;\n  return (\n    nodeName &&\n    nodeName.toLowerCase() === 'input' &&\n    (type === 'checkbox' || type === 'radio')\n  );\n}\n\nfunction getTracker(node: ElementWithValueTracker) {\n  return node._valueTracker;\n}\n\nfunction detachTracker(node: ElementWithValueTracker) {\n  node._valueTracker = null;\n}\n\nfunction getValueFromNode(node: HTMLInputElement): string {\n  let value = '';\n  if (!node) {\n    return value;\n  }\n\n  if (isCheckable(node)) {\n    value = node.checked ? 'true' : 'false';\n  } else {\n    value = node.value;\n  }\n\n  return value;\n}\n\nfunction trackValueOnNode(node: any): ?ValueTracker {\n  const valueField = isCheckable(node) ? 'checked' : 'value';\n  const descriptor = Object.getOwnPropertyDescriptor(\n    node.constructor.prototype,\n    valueField,\n  );\n\n  let currentValue = '' + node[valueField];\n\n  // if someone has already defined a value or Safari, then bail\n  // and don't track value will cause over reporting of changes,\n  // but it's better then a hard failure\n  // (needed for certain tests that spyOn input values and Safari)\n  if (\n    node.hasOwnProperty(valueField) ||\n    typeof descriptor === 'undefined' ||\n    typeof descriptor.get !== 'function' ||\n    typeof descriptor.set !== 'function'\n  ) {\n    return;\n  }\n  const {get, set} = descriptor;\n  Object.defineProperty(node, valueField, {\n    configurable: true,\n    get: function() {\n      return get.call(this);\n    },\n    set: function(value) {\n      currentValue = '' + value;\n      set.call(this, value);\n    },\n  });\n  // We could've passed this the first time\n  // but it triggers a bug in IE11 and Edge 14/15.\n  // Calling defineProperty() again should be equivalent.\n  // https://github.com/facebook/react/issues/11768\n  Object.defineProperty(node, valueField, {\n    enumerable: descriptor.enumerable,\n  });\n\n  const tracker = {\n    getValue() {\n      return currentValue;\n    },\n    setValue(value) {\n      currentValue = '' + value;\n    },\n    stopTracking() {\n      detachTracker(node);\n      delete node[valueField];\n    },\n  };\n  return tracker;\n}\n\nexport function track(node: ElementWithValueTracker) {\n  if (getTracker(node)) {\n    return;\n  }\n\n  // TODO: Once it's just Fiber we can move this to node._wrapperState\n  node._valueTracker = trackValueOnNode(node);\n}\n\nexport function updateValueIfChanged(node: ElementWithValueTracker) {\n  if (!node) {\n    return false;\n  }\n\n  const tracker = getTracker(node);\n  // if there is no tracker at this point it's unlikely\n  // that trying again will succeed\n  if (!tracker) {\n    return true;\n  }\n\n  const lastValue = tracker.getValue();\n  const nextValue = getValueFromNode(node);\n  if (nextValue !== lastValue) {\n    tracker.setValue(nextValue);\n    return true;\n  }\n  return false;\n}\n\nexport function stopTracking(node: ElementWithValueTracker) {\n  const tracker = getTracker(node);\n  if (tracker) {\n    tracker.stopTracking();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}