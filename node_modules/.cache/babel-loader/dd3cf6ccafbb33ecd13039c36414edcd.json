{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nimport { getCurrentFiberOwnerNameInDevOrNull } from 'react-reconciler/src/ReactCurrentFiber';\nimport ReactControlledValuePropTypes from '../shared/ReactControlledValuePropTypes';\nimport { getToStringValue, toString } from './ToStringValue';\nlet didWarnValueDefaultValue;\n\nif (__DEV__) {\n  didWarnValueDefaultValue = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n  if (ownerName) {\n    return '\\n\\nCheck the render method of `' + ownerName + '`.';\n  }\n\n  return '';\n}\n\nconst valuePropNames = ['value', 'defaultValue'];\n/**\n * Validation function for `value` and `defaultValue`.\n */\n\nfunction checkSelectPropTypes(props) {\n  if (__DEV__) {\n    ReactControlledValuePropTypes.checkPropTypes('select', props);\n\n    for (let i = 0; i < valuePropNames.length; i++) {\n      const propName = valuePropNames[i];\n\n      if (props[propName] == null) {\n        continue;\n      }\n\n      const isArray = Array.isArray(props[propName]);\n\n      if (props.multiple && !isArray) {\n        console.error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());\n      } else if (!props.multiple && isArray) {\n        console.error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());\n      }\n    }\n  }\n}\n\nfunction updateOptions(node, multiple, propValue, setDefaultSelected) {\n  const options = node.options;\n\n  if (multiple) {\n    let selectedValues = propValue;\n    let selectedValue = {};\n\n    for (let i = 0; i < selectedValues.length; i++) {\n      // Prefix to avoid chaos with special keys.\n      selectedValue['$' + selectedValues[i]] = true;\n    }\n\n    for (let i = 0; i < options.length; i++) {\n      const selected = selectedValue.hasOwnProperty('$' + options[i].value);\n\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n\n      if (selected && setDefaultSelected) {\n        options[i].defaultSelected = true;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    let selectedValue = toString(getToStringValue(propValue));\n    let defaultSelected = null;\n\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n\n        if (setDefaultSelected) {\n          options[i].defaultSelected = true;\n        }\n\n        return;\n      }\n\n      if (defaultSelected === null && !options[i].disabled) {\n        defaultSelected = options[i];\n      }\n    }\n\n    if (defaultSelected !== null) {\n      defaultSelected.selected = true;\n    }\n  }\n}\n/**\n * Implements a <select> host component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\n\n\nexport function getHostProps(element, props) {\n  return Object.assign({}, props, {\n    value: undefined\n  });\n}\nexport function initWrapperState(element, props) {\n  const node = element;\n\n  if (__DEV__) {\n    checkSelectPropTypes(props);\n  }\n\n  node._wrapperState = {\n    wasMultiple: !!props.multiple\n  };\n\n  if (__DEV__) {\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\n      console.error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');\n      didWarnValueDefaultValue = true;\n    }\n  }\n}\nexport function postMountWrapper(element, props) {\n  const node = element;\n  node.multiple = !!props.multiple;\n  const value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  } else if (props.defaultValue != null) {\n    updateOptions(node, !!props.multiple, props.defaultValue, true);\n  }\n}\nexport function postUpdateWrapper(element, props) {\n  const node = element;\n  const wasMultiple = node._wrapperState.wasMultiple;\n  node._wrapperState.wasMultiple = !!props.multiple;\n  const value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  } else if (wasMultiple !== !!props.multiple) {\n    // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n    if (props.defaultValue != null) {\n      updateOptions(node, !!props.multiple, props.defaultValue, true);\n    } else {\n      // Revert the select back to its default unselected state.\n      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);\n    }\n  }\n}\nexport function restoreControlledState(element, props) {\n  const node = element;\n  const value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  }\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-dom/src/client/ReactDOMSelect.js"],"names":["getCurrentFiberOwnerNameInDevOrNull","ReactControlledValuePropTypes","getToStringValue","toString","didWarnValueDefaultValue","__DEV__","getDeclarationErrorAddendum","ownerName","valuePropNames","checkSelectPropTypes","props","checkPropTypes","i","length","propName","isArray","Array","multiple","console","error","updateOptions","node","propValue","setDefaultSelected","options","selectedValues","selectedValue","selected","hasOwnProperty","value","defaultSelected","disabled","getHostProps","element","Object","assign","undefined","initWrapperState","_wrapperState","wasMultiple","defaultValue","postMountWrapper","postUpdateWrapper","restoreControlledState"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nimport {getCurrentFiberOwnerNameInDevOrNull} from 'react-reconciler/src/ReactCurrentFiber';\n\nimport ReactControlledValuePropTypes from '../shared/ReactControlledValuePropTypes';\nimport {getToStringValue, toString} from './ToStringValue';\n\nlet didWarnValueDefaultValue;\n\nif (__DEV__) {\n  didWarnValueDefaultValue = false;\n}\n\ntype SelectWithWrapperState = HTMLSelectElement & {|\n  _wrapperState: {|wasMultiple: boolean|},\n|};\n\nfunction getDeclarationErrorAddendum() {\n  const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n  if (ownerName) {\n    return '\\n\\nCheck the render method of `' + ownerName + '`.';\n  }\n  return '';\n}\n\nconst valuePropNames = ['value', 'defaultValue'];\n\n/**\n * Validation function for `value` and `defaultValue`.\n */\nfunction checkSelectPropTypes(props) {\n  if (__DEV__) {\n    ReactControlledValuePropTypes.checkPropTypes('select', props);\n\n    for (let i = 0; i < valuePropNames.length; i++) {\n      const propName = valuePropNames[i];\n      if (props[propName] == null) {\n        continue;\n      }\n      const isArray = Array.isArray(props[propName]);\n      if (props.multiple && !isArray) {\n        console.error(\n          'The `%s` prop supplied to <select> must be an array if ' +\n            '`multiple` is true.%s',\n          propName,\n          getDeclarationErrorAddendum(),\n        );\n      } else if (!props.multiple && isArray) {\n        console.error(\n          'The `%s` prop supplied to <select> must be a scalar ' +\n            'value if `multiple` is false.%s',\n          propName,\n          getDeclarationErrorAddendum(),\n        );\n      }\n    }\n  }\n}\n\nfunction updateOptions(\n  node: HTMLSelectElement,\n  multiple: boolean,\n  propValue: any,\n  setDefaultSelected: boolean,\n) {\n  type IndexableHTMLOptionsCollection = HTMLOptionsCollection & {\n    [key: number]: HTMLOptionElement,\n    ...,\n  };\n  const options: IndexableHTMLOptionsCollection = node.options;\n\n  if (multiple) {\n    let selectedValues = (propValue: Array<string>);\n    let selectedValue = {};\n    for (let i = 0; i < selectedValues.length; i++) {\n      // Prefix to avoid chaos with special keys.\n      selectedValue['$' + selectedValues[i]] = true;\n    }\n    for (let i = 0; i < options.length; i++) {\n      const selected = selectedValue.hasOwnProperty('$' + options[i].value);\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n      if (selected && setDefaultSelected) {\n        options[i].defaultSelected = true;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    let selectedValue = toString(getToStringValue((propValue: any)));\n    let defaultSelected = null;\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n        if (setDefaultSelected) {\n          options[i].defaultSelected = true;\n        }\n        return;\n      }\n      if (defaultSelected === null && !options[i].disabled) {\n        defaultSelected = options[i];\n      }\n    }\n    if (defaultSelected !== null) {\n      defaultSelected.selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> host component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\n\nexport function getHostProps(element: Element, props: Object) {\n  return Object.assign({}, props, {\n    value: undefined,\n  });\n}\n\nexport function initWrapperState(element: Element, props: Object) {\n  const node = ((element: any): SelectWithWrapperState);\n  if (__DEV__) {\n    checkSelectPropTypes(props);\n  }\n\n  node._wrapperState = {\n    wasMultiple: !!props.multiple,\n  };\n\n  if (__DEV__) {\n    if (\n      props.value !== undefined &&\n      props.defaultValue !== undefined &&\n      !didWarnValueDefaultValue\n    ) {\n      console.error(\n        'Select elements must be either controlled or uncontrolled ' +\n          '(specify either the value prop, or the defaultValue prop, but not ' +\n          'both). Decide between using a controlled or uncontrolled select ' +\n          'element and remove one of these props. More info: ' +\n          'https://fb.me/react-controlled-components',\n      );\n      didWarnValueDefaultValue = true;\n    }\n  }\n}\n\nexport function postMountWrapper(element: Element, props: Object) {\n  const node = ((element: any): SelectWithWrapperState);\n  node.multiple = !!props.multiple;\n  const value = props.value;\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  } else if (props.defaultValue != null) {\n    updateOptions(node, !!props.multiple, props.defaultValue, true);\n  }\n}\n\nexport function postUpdateWrapper(element: Element, props: Object) {\n  const node = ((element: any): SelectWithWrapperState);\n  const wasMultiple = node._wrapperState.wasMultiple;\n  node._wrapperState.wasMultiple = !!props.multiple;\n\n  const value = props.value;\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  } else if (wasMultiple !== !!props.multiple) {\n    // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n    if (props.defaultValue != null) {\n      updateOptions(node, !!props.multiple, props.defaultValue, true);\n    } else {\n      // Revert the select back to its default unselected state.\n      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);\n    }\n  }\n}\n\nexport function restoreControlledState(element: Element, props: Object) {\n  const node = ((element: any): SelectWithWrapperState);\n  const value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}