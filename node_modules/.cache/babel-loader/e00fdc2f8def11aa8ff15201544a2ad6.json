{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { getPublicInstance, getInstanceFromNode } from './ReactFiberHostConfig';\nimport { HostComponent, SuspenseComponent, ScopeComponent, ContextProvider } from 'shared/ReactWorkTags';\nimport { enableScopeAPI } from 'shared/ReactFeatureFlags';\n\nfunction isFiberSuspenseAndTimedOut(fiber) {\n  return fiber.tag === SuspenseComponent && fiber.memoizedState !== null;\n}\n\nfunction getSuspenseFallbackChild(fiber) {\n  return fiber.child.sibling.child;\n}\n\nconst emptyObject = {};\n\nfunction collectScopedNodes(node, fn, scopedNodes) {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {\n        type,\n        memoizedProps,\n        stateNode\n      } = node;\n      const instance = getPublicInstance(stateNode);\n\n      if (instance !== null && fn(type, memoizedProps || emptyObject, instance) === true) {\n        scopedNodes.push(instance);\n      }\n    }\n\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n\n    if (child !== null) {\n      collectScopedNodesFromChildren(child, fn, scopedNodes);\n    }\n  }\n}\n\nfunction collectFirstScopedNode(node, fn) {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {\n        type,\n        memoizedProps,\n        stateNode\n      } = node;\n      const instance = getPublicInstance(stateNode);\n\n      if (instance !== null && fn(type, memoizedProps, instance) === true) {\n        return instance;\n      }\n    }\n\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n\n    if (child !== null) {\n      return collectFirstScopedNodeFromChildren(child, fn);\n    }\n  }\n\n  return null;\n}\n\nfunction collectScopedNodesFromChildren(startingChild, fn, scopedNodes) {\n  let child = startingChild;\n\n  while (child !== null) {\n    collectScopedNodes(child, fn, scopedNodes);\n    child = child.sibling;\n  }\n}\n\nfunction collectFirstScopedNodeFromChildren(startingChild, fn) {\n  let child = startingChild;\n\n  while (child !== null) {\n    const scopedNode = collectFirstScopedNode(child, fn);\n\n    if (scopedNode !== null) {\n      return scopedNode;\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nfunction collectNearestContextValues(node, context, childContextValues) {\n  if (node.tag === ContextProvider && node.type._context === context) {\n    const contextValue = node.memoizedProps.value;\n    childContextValues.push(contextValue);\n  } else {\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n\n    if (child !== null) {\n      collectNearestChildContextValues(child, context, childContextValues);\n    }\n  }\n}\n\nfunction collectNearestChildContextValues(startingChild, context, childContextValues) {\n  let child = startingChild;\n\n  while (child !== null) {\n    collectNearestContextValues(child, context, childContextValues);\n    child = child.sibling;\n  }\n}\n\nexport function createScopeMethods(scope, instance) {\n  return {\n    DO_NOT_USE_queryAllNodes(fn) {\n      const currentFiber = instance.fiber;\n      const child = currentFiber.child;\n      const scopedNodes = [];\n\n      if (child !== null) {\n        collectScopedNodesFromChildren(child, fn, scopedNodes);\n      }\n\n      return scopedNodes.length === 0 ? null : scopedNodes;\n    },\n\n    DO_NOT_USE_queryFirstNode(fn) {\n      const currentFiber = instance.fiber;\n      const child = currentFiber.child;\n\n      if (child !== null) {\n        return collectFirstScopedNodeFromChildren(child, fn);\n      }\n\n      return null;\n    },\n\n    containsNode(node) {\n      let fiber = getInstanceFromNode(node);\n\n      while (fiber !== null) {\n        if (fiber.tag === ScopeComponent && fiber.type === scope && fiber.stateNode === instance) {\n          return true;\n        }\n\n        fiber = fiber.return;\n      }\n\n      return false;\n    },\n\n    getChildContextValues(context) {\n      const currentFiber = instance.fiber;\n      const child = currentFiber.child;\n      const childContextValues = [];\n\n      if (child !== null) {\n        collectNearestChildContextValues(child, context, childContextValues);\n      }\n\n      return childContextValues;\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/malinfeng/Desktop/mywww/react-test/src/react/packages/react-reconciler/src/ReactFiberScope.js"],"names":["getPublicInstance","getInstanceFromNode","HostComponent","SuspenseComponent","ScopeComponent","ContextProvider","enableScopeAPI","isFiberSuspenseAndTimedOut","fiber","tag","memoizedState","getSuspenseFallbackChild","child","sibling","emptyObject","collectScopedNodes","node","fn","scopedNodes","type","memoizedProps","stateNode","instance","push","collectScopedNodesFromChildren","collectFirstScopedNode","collectFirstScopedNodeFromChildren","startingChild","scopedNode","collectNearestContextValues","context","childContextValues","_context","contextValue","value","collectNearestChildContextValues","createScopeMethods","scope","DO_NOT_USE_queryAllNodes","currentFiber","length","DO_NOT_USE_queryFirstNode","containsNode","return","getChildContextValues"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactFiber';\nimport type {\n  ReactScope,\n  ReactScopeInstance,\n  ReactScopeMethods,\n  ReactContext,\n  ReactScopeQuery,\n} from 'shared/ReactTypes';\n\nimport {getPublicInstance, getInstanceFromNode} from './ReactFiberHostConfig';\n\nimport {\n  HostComponent,\n  SuspenseComponent,\n  ScopeComponent,\n  ContextProvider,\n} from 'shared/ReactWorkTags';\nimport {enableScopeAPI} from 'shared/ReactFeatureFlags';\n\nfunction isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  return fiber.tag === SuspenseComponent && fiber.memoizedState !== null;\n}\n\nfunction getSuspenseFallbackChild(fiber: Fiber): Fiber | null {\n  return ((((fiber.child: any): Fiber).sibling: any): Fiber).child;\n}\n\nconst emptyObject = {};\n\nfunction collectScopedNodes(\n  node: Fiber,\n  fn: ReactScopeQuery,\n  scopedNodes: Array<any>,\n): void {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {type, memoizedProps, stateNode} = node;\n      const instance = getPublicInstance(stateNode);\n      if (\n        instance !== null &&\n        fn(type, memoizedProps || emptyObject, instance) === true\n      ) {\n        scopedNodes.push(instance);\n      }\n    }\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      collectScopedNodesFromChildren(child, fn, scopedNodes);\n    }\n  }\n}\n\nfunction collectFirstScopedNode(\n  node: Fiber,\n  fn: ReactScopeQuery,\n): null | Object {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {type, memoizedProps, stateNode} = node;\n      const instance = getPublicInstance(stateNode);\n      if (instance !== null && fn(type, memoizedProps, instance) === true) {\n        return instance;\n      }\n    }\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      return collectFirstScopedNodeFromChildren(child, fn);\n    }\n  }\n  return null;\n}\n\nfunction collectScopedNodesFromChildren(\n  startingChild: Fiber,\n  fn: ReactScopeQuery,\n  scopedNodes: Array<any>,\n): void {\n  let child = startingChild;\n  while (child !== null) {\n    collectScopedNodes(child, fn, scopedNodes);\n    child = child.sibling;\n  }\n}\n\nfunction collectFirstScopedNodeFromChildren(\n  startingChild: Fiber,\n  fn: ReactScopeQuery,\n): Object | null {\n  let child = startingChild;\n  while (child !== null) {\n    const scopedNode = collectFirstScopedNode(child, fn);\n    if (scopedNode !== null) {\n      return scopedNode;\n    }\n    child = child.sibling;\n  }\n  return null;\n}\n\nfunction collectNearestContextValues<T>(\n  node: Fiber,\n  context: ReactContext<T>,\n  childContextValues: Array<T>,\n): void {\n  if (node.tag === ContextProvider && node.type._context === context) {\n    const contextValue = node.memoizedProps.value;\n    childContextValues.push(contextValue);\n  } else {\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      collectNearestChildContextValues(child, context, childContextValues);\n    }\n  }\n}\n\nfunction collectNearestChildContextValues<T>(\n  startingChild: Fiber | null,\n  context: ReactContext<T>,\n  childContextValues: Array<T>,\n): void {\n  let child = startingChild;\n  while (child !== null) {\n    collectNearestContextValues(child, context, childContextValues);\n    child = child.sibling;\n  }\n}\n\nexport function createScopeMethods(\n  scope: ReactScope,\n  instance: ReactScopeInstance,\n): ReactScopeMethods {\n  return {\n    DO_NOT_USE_queryAllNodes(fn: ReactScopeQuery): null | Array<Object> {\n      const currentFiber = ((instance.fiber: any): Fiber);\n      const child = currentFiber.child;\n      const scopedNodes = [];\n      if (child !== null) {\n        collectScopedNodesFromChildren(child, fn, scopedNodes);\n      }\n      return scopedNodes.length === 0 ? null : scopedNodes;\n    },\n    DO_NOT_USE_queryFirstNode(fn: ReactScopeQuery): null | Object {\n      const currentFiber = ((instance.fiber: any): Fiber);\n      const child = currentFiber.child;\n      if (child !== null) {\n        return collectFirstScopedNodeFromChildren(child, fn);\n      }\n      return null;\n    },\n    containsNode(node: Object): boolean {\n      let fiber = getInstanceFromNode(node);\n      while (fiber !== null) {\n        if (\n          fiber.tag === ScopeComponent &&\n          fiber.type === scope &&\n          fiber.stateNode === instance\n        ) {\n          return true;\n        }\n        fiber = fiber.return;\n      }\n      return false;\n    },\n    getChildContextValues<T>(context: ReactContext<T>): Array<T> {\n      const currentFiber = ((instance.fiber: any): Fiber);\n      const child = currentFiber.child;\n      const childContextValues = [];\n      if (child !== null) {\n        collectNearestChildContextValues(child, context, childContextValues);\n      }\n      return childContextValues;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}